# Ansible Role Interface Contract: GitLab CI/CD Platform
# This contract defines the public interface for the gitlab and gitlab_runner Ansible roles

---
## GitLab Role Interface

role_name: gitlab
description: Deploy and configure GitLab CE instance in Proxmox LXC container

# Required Variables (must be defined in inventory or group_vars)
required_vars:
  gitlab_external_url:
    type: string
    format: url
    description: Public-facing GitLab URL
    example: "https://gitlab.example.com"

  gitlab_root_password:
    type: string
    encrypted: true
    vault_path: "vault_gitlab_root_password"
    description: Initial root account password (Ansible Vault encrypted)

  gitlab_lxc_vmid:
    type: integer
    min: 100
    max: 999
    description: Proxmox LXC container ID
    example: 200

  gitlab_oidc_client_secret:
    type: string
    encrypted: true
    vault_path: "vault_gitlab_oidc_secret"
    description: Keycloak OIDC client secret (Ansible Vault encrypted)
    condition: "when gitlab_oidc_enabled == true"

# Optional Variables (have defaults in defaults/main.yml)
optional_vars:
  gitlab_version:
    type: string
    default: "16.11"
    description: GitLab major.minor version to install
    example: "17.0"

  gitlab_lxc_hostname:
    type: string
    default: "gitlab"
    description: LXC container hostname

  gitlab_lxc_cores:
    type: integer
    default: 4
    min: 2
    max: 32
    description: CPU cores allocated to GitLab container

  gitlab_lxc_memory_mb:
    type: integer
    default: 8192
    min: 4096
    max: 65536
    description: Memory in MB allocated to GitLab container

  gitlab_lxc_disk_size_gb:
    type: integer
    default: 50
    min: 20
    max: 1000
    description: Root disk size in GB

  gitlab_lxc_template:
    type: string
    default: "debian-12-standard"
    allowed_values: ["debian-11-standard", "debian-12-standard", "ubuntu-22.04-standard"]
    description: Proxmox LXC template

  gitlab_ssh_port:
    type: integer
    default: 2222
    min: 1024
    max: 65535
    description: SSH port for Git operations

  gitlab_registry_enabled:
    type: boolean
    default: true
    description: Enable container registry feature

  gitlab_oidc_enabled:
    type: boolean
    default: true
    description: Enable Keycloak OIDC authentication

  gitlab_oidc_issuer:
    type: string
    format: url
    default: "https://keycloak.example.com/realms/main"
    description: Keycloak OIDC issuer URL
    condition: "when gitlab_oidc_enabled == true"

  gitlab_oidc_client_id:
    type: string
    default: "gitlab"
    description: Keycloak OIDC client ID
    condition: "when gitlab_oidc_enabled == true"

  gitlab_backup_enabled:
    type: boolean
    default: true
    description: Enable automated backups

  gitlab_backup_schedule:
    type: string
    format: cron
    default: "0 2 * * *"
    description: Cron schedule for GitLab backups
    condition: "when gitlab_backup_enabled == true"

  gitlab_backup_keep_time:
    type: integer
    default: 604800
    description: Backup retention time in seconds (default 7 days)
    condition: "when gitlab_backup_enabled == true"

  gitlab_data_zfs_dataset:
    type: string
    default: "rpool/gitlab-data"
    description: ZFS dataset for GitLab data storage

  gitlab_registry_zfs_dataset:
    type: string
    default: "rpool/gitlab-registry"
    description: ZFS dataset for container registry storage

# Role Dependencies
dependencies:
  - name: proxmox_lxc
    description: LXC container creation and management
    optional: false

  - name: traefik
    description: Reverse proxy for HTTPS termination
    optional: false

  - name: netbox
    description: CMDB integration for service registration
    optional: true

# Role Tasks (public interface)
tasks:
  - name: Create GitLab LXC container
    tags: [gitlab, lxc, provision]
    idempotent: true

  - name: Install GitLab CE package
    tags: [gitlab, install]
    idempotent: true

  - name: Configure GitLab (gitlab.rb)
    tags: [gitlab, configure]
    idempotent: true
    triggers_restart: true

  - name: Configure OIDC authentication
    tags: [gitlab, oidc]
    idempotent: true
    triggers_restart: true
    condition: "when gitlab_oidc_enabled == true"

  - name: Configure container registry
    tags: [gitlab, registry]
    idempotent: true
    triggers_restart: true
    condition: "when gitlab_registry_enabled == true"

  - name: Integrate with Traefik
    tags: [gitlab, traefik]
    idempotent: true

  - name: Register in NetBox
    tags: [gitlab, netbox]
    idempotent: true
    condition: "when netbox integration is available"

  - name: Configure automated backups
    tags: [gitlab, backup]
    idempotent: true
    condition: "when gitlab_backup_enabled == true"

# Role Handlers
handlers:
  - name: reconfigure gitlab
    description: Run gitlab-ctl reconfigure to apply configuration changes
    command: "gitlab-ctl reconfigure"

  - name: restart gitlab
    description: Restart all GitLab services
    command: "gitlab-ctl restart"

# Role Outputs (registered variables)
outputs:
  gitlab_instance_url:
    description: Fully qualified GitLab URL
    example: "https://gitlab.example.com"

  gitlab_lxc_ip:
    description: Internal IP address of GitLab container
    example: "10.0.10.10"

  gitlab_version_installed:
    description: Installed GitLab version
    example: "16.11.2-ce.0"

  gitlab_root_access_url:
    description: Initial admin access URL
    example: "https://gitlab.example.com/admin (username: root)"

# Role Facts (set by role execution)
facts:
  gitlab_installed: boolean
  gitlab_configured: boolean
  gitlab_running: boolean
  gitlab_registry_available: boolean
  gitlab_oidc_configured: boolean

---
## GitLab Runner Role Interface

role_name: gitlab_runner
description: Deploy and configure GitLab Runner instances in Proxmox LXC containers

# Required Variables
required_vars:
  gitlab_runner_registration_token:
    type: string
    encrypted: true
    vault_path: "vault_gitlab_runner_token"
    description: Runner authentication token (Ansible Vault encrypted)

  gitlab_runner_registration_url:
    type: string
    format: url
    description: GitLab instance URL for runner registration
    example: "https://gitlab.example.com"

  gitlab_runner_lxc_vmid_start:
    type: integer
    min: 100
    max: 999
    description: Starting LXC container ID (increments for multiple runners)
    example: 201

# Optional Variables
optional_vars:
  gitlab_runner_count:
    type: integer
    default: 1
    min: 1
    max: 10
    description: Number of runner containers to deploy

  gitlab_runner_lxc_hostname_prefix:
    type: string
    default: "runner"
    description: Hostname prefix for runner containers (appends index)
    example: "runner" -> "runner-01", "runner-02"

  gitlab_runner_lxc_cores:
    type: integer
    default: 2
    min: 1
    max: 16
    description: CPU cores per runner container

  gitlab_runner_lxc_memory_mb:
    type: integer
    default: 4096
    min: 2048
    max: 32768
    description: Memory in MB per runner container

  gitlab_runner_lxc_disk_size_gb:
    type: integer
    default: 20
    min: 10
    max: 500
    description: Root disk size in GB per runner container

  gitlab_runner_lxc_template:
    type: string
    default: "debian-12-standard"
    allowed_values: ["debian-11-standard", "debian-12-standard", "ubuntu-22.04-standard"]
    description: Proxmox LXC template

  gitlab_runner_executor:
    type: string
    default: "docker"
    allowed_values: ["docker", "shell", "kubernetes"]
    description: Runner executor type

  gitlab_runner_concurrent_jobs:
    type: integer
    default: 3
    min: 1
    max: 20
    description: Maximum concurrent jobs per runner

  gitlab_runner_max_job_timeout:
    type: string
    default: "1h"
    pattern: '^\d+[smhd]$'
    description: Maximum job duration (e.g., "1h", "3600s")

  gitlab_runner_tags:
    type: list
    default: ["docker", "self-hosted"]
    description: Runner tags for job filtering
    example: ["docker", "linux", "amd64"]

  gitlab_runner_docker_privileged:
    type: boolean
    default: true
    description: Enable privileged mode for Docker executor (required for DinD)
    condition: "when gitlab_runner_executor == 'docker'"

  gitlab_runner_docker_volumes:
    type: list
    default: ["/cache"]
    description: Docker volumes to mount in job containers
    condition: "when gitlab_runner_executor == 'docker'"

  # GitLab.com Integration
  gitlab_runner_gitlab_com_enabled:
    type: boolean
    default: false
    description: Enable registration with GitLab.com

  gitlab_runner_gitlab_com_token:
    type: string
    encrypted: true
    vault_path: "vault_gitlab_com_runner_token"
    description: GitLab.com runner authentication token (Ansible Vault encrypted)
    condition: "when gitlab_runner_gitlab_com_enabled == true"

  gitlab_runner_gitlab_com_tags:
    type: list
    default: ["self-hosted", "gitlab-com"]
    description: Tags for GitLab.com registered runners
    condition: "when gitlab_runner_gitlab_com_enabled == true"

# Role Dependencies
dependencies:
  - name: proxmox_lxc
    description: LXC container creation and management
    optional: false

  - name: docker
    description: Docker installation for docker executor
    optional: false
    condition: "when gitlab_runner_executor == 'docker'"

  - name: netbox
    description: CMDB integration for runner registration
    optional: true

# Role Tasks
tasks:
  - name: Create runner LXC containers
    tags: [runner, lxc, provision]
    idempotent: true
    loop_count: "{{ gitlab_runner_count }}"

  - name: Install GitLab Runner binary
    tags: [runner, install]
    idempotent: true

  - name: Install Docker (for docker executor)
    tags: [runner, docker]
    idempotent: true
    condition: "when gitlab_runner_executor == 'docker'"

  - name: Configure runner (config.toml)
    tags: [runner, configure]
    idempotent: true

  - name: Register runner with self-hosted GitLab
    tags: [runner, register]
    idempotent: true
    condition: "when gitlab_runner_registration_url is defined"

  - name: Register runner with GitLab.com
    tags: [runner, register, gitlab-com]
    idempotent: true
    condition: "when gitlab_runner_gitlab_com_enabled == true"

  - name: Register runners in NetBox
    tags: [runner, netbox]
    idempotent: true
    condition: "when netbox integration is available"

# Role Handlers
handlers:
  - name: restart gitlab-runner
    description: Restart GitLab Runner service
    command: "systemctl restart gitlab-runner"

  - name: verify runner
    description: Verify runner connectivity to GitLab
    command: "gitlab-runner verify"

# Role Outputs
outputs:
  gitlab_runner_ids:
    description: List of registered runner IDs
    type: list
    example: [12345, 12346]

  gitlab_runner_lxc_ips:
    description: Internal IP addresses of runner containers
    type: list
    example: ["10.0.10.11", "10.0.10.12"]

  gitlab_runner_status:
    description: Registration status for each runner
    type: list
    example: ["active", "active"]

# Role Facts
facts:
  gitlab_runner_installed: boolean
  gitlab_runner_registered: boolean
  gitlab_runner_executor_type: string
  gitlab_runner_docker_available: boolean

---
## Playbook Interface

# Main Deployment Playbook
playbook: playbooks/gitlab_deploy.yml
description: Deploy GitLab instance and runners
usage: |
  ansible-playbook playbooks/gitlab_deploy.yml \
    --ask-vault-pass \
    --tags gitlab,runner

targets:
  - localhost (for Proxmox API calls)

# Runner-Only Deployment
playbook: playbooks/gitlab_runner_deploy.yml
description: Deploy additional GitLab Runners
usage: |
  ansible-playbook playbooks/gitlab_runner_deploy.yml \
    --ask-vault-pass \
    --extra-vars "gitlab_runner_count=3"

# Backup Playbook
playbook: playbooks/gitlab_backup.yml
description: Trigger immediate GitLab backup
usage: |
  ansible-playbook playbooks/gitlab_backup.yml

# Teardown Playbook (Destructive)
playbook: playbooks/gitlab_teardown.yml
description: Remove GitLab instance and runners (requires confirmation)
usage: |
  ansible-playbook playbooks/gitlab_teardown.yml \
    --ask-vault-pass \
    --extra-vars "confirm_teardown=yes"

---
## Integration Contracts

# Keycloak OIDC Integration
integration: keycloak
protocol: OIDC
requirements:
  - Keycloak realm configured (e.g., "main")
  - OIDC client created with ID "gitlab"
  - Client secret generated and stored in Ansible Vault
  - Allowed redirect URIs: "https://gitlab.example.com/users/auth/openid_connect/callback"
  - Client scopes: openid, profile, email

configuration:
  gitlab_rb_snippet: |
    gitlab_rails['omniauth_providers'] = [
      {
        name: 'openid_connect',
        label: 'Keycloak SSO',
        args: {
          name: 'openid_connect',
          scope: ['openid', 'profile', 'email'],
          response_type: 'code',
          issuer: '{{ gitlab_oidc_issuer }}',
          discovery: true,
          uid_field: 'preferred_username',
          client_options: {
            identifier: '{{ gitlab_oidc_client_id }}',
            secret: '{{ gitlab_oidc_client_secret }}',
            redirect_uri: '{{ gitlab_external_url }}/users/auth/openid_connect/callback'
          }
        }
      }
    ]

# Traefik Reverse Proxy Integration
integration: traefik
protocol: HTTP
requirements:
  - Traefik Docker provider enabled
  - Let's Encrypt certificate resolver configured
  - GitLab container network accessible by Traefik

configuration:
  docker_labels:
    traefik.enable: "true"
    traefik.http.routers.gitlab.rule: "Host(`gitlab.example.com`)"
    traefik.http.routers.gitlab.entrypoints: "websecure"
    traefik.http.routers.gitlab.tls.certresolver: "letsencrypt"
    traefik.http.services.gitlab.loadbalancer.server.port: "80"
    traefik.http.middlewares.gitlab-headers.headers.sslredirect: "true"
    traefik.http.routers.gitlab.middlewares: "gitlab-headers"

# NetBox CMDB Integration
integration: netbox
protocol: REST API
requirements:
  - NetBox API token with write permissions
  - Device type "LXC Container" exists in NetBox
  - Site and cluster configured

api_endpoints:
  register_gitlab:
    method: POST
    url: "{{ netbox_url }}/api/dcim/devices/"
    payload:
      name: "{{ gitlab_lxc_hostname }}"
      device_type: "lxc-container"
      site: "{{ netbox_site_id }}"
      cluster: "{{ proxmox_cluster_name }}"
      primary_ip4: "{{ gitlab_lxc_ip }}"
      custom_fields:
        service_type: "gitlab-ce"
        external_url: "{{ gitlab_external_url }}"
        lxc_vmid: "{{ gitlab_lxc_vmid }}"

  register_runner:
    method: POST
    url: "{{ netbox_url }}/api/dcim/devices/"
    payload:
      name: "{{ runner_hostname }}"
      device_type: "lxc-container"
      site: "{{ netbox_site_id }}"
      cluster: "{{ proxmox_cluster_name }}"
      primary_ip4: "{{ runner_lxc_ip }}"
      custom_fields:
        service_type: "gitlab-runner"
        executor_type: "{{ gitlab_runner_executor }}"
        lxc_vmid: "{{ runner_lxc_vmid }}"

---
## Testing Interface

# Molecule Test Scenarios
test_framework: ansible-molecule
driver: docker

gitlab_role_tests:
  - name: default
    description: Test GitLab installation and basic configuration
    assertions:
      - GitLab package is installed
      - gitlab.rb is templated correctly
      - GitLab services are running
      - Health endpoint returns 200

  - name: oidc
    description: Test OIDC configuration
    assertions:
      - OIDC provider configured in gitlab.rb
      - OIDC callback URL is correct

  - name: registry
    description: Test container registry configuration
    assertions:
      - Registry is enabled in gitlab.rb
      - Registry storage path exists
      - Registry is accessible

gitlab_runner_role_tests:
  - name: default
    description: Test runner installation and registration
    assertions:
      - GitLab Runner binary is installed
      - config.toml is templated correctly
      - Runner service is running
      - Runner is registered (mock registration)

  - name: docker_executor
    description: Test Docker executor configuration
    assertions:
      - Docker is installed
      - Runner has Docker executor configured
      - Privileged mode is enabled

---
**Status**: ✅ Role Interface Contract Complete
