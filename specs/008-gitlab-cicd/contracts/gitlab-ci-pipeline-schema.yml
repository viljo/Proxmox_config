# GitLab CI/CD Pipeline Schema
# Purpose: Define the structure and validation rules for .gitlab-ci.yml
# Version: 1.0.0
# Date: 2025-10-20
# Documentation: https://docs.gitlab.com/ee/ci/yaml/

---
# Pipeline File Metadata

file_path: .gitlab-ci.yml
file_format: YAML
file_location: "Repository root"
permissions: "0644"  # World-readable in repository
trigger: "Git push, merge request, schedule, API, manual"

---
# Top-Level Pipeline Keywords

stages:
  description: "Ordered list of pipeline stages"
  type: array
  required: false
  default: [build, test, deploy]
  example: ['build', 'test', 'deploy', 'cleanup']
  note: "Jobs in earlier stages run before later stages"
  validation: "Stage names must be unique"

variables:
  description: "Global CI/CD variables for all jobs"
  type: hash
  required: false
  example:
    PROJECT_NAME: "myapp"
    DOCKER_DRIVER: "overlay2"
  note: "Can be overridden in job-level variables"

default:
  description: "Default settings inherited by all jobs"
  type: hash
  required: false
  schema:
    image:
      type: string
      example: "debian:12"
    before_script:
      type: array
      example: ['apt-get update', 'apt-get install -y build-essential']
    after_script:
      type: array
      example: ['cleanup.sh']
    cache:
      type: hash
    artifacts:
      type: hash
    retry:
      type: integer
      range: [0, 2]
    timeout:
      type: string
      example: "1h"

workflow:
  description: "Pipeline-level execution rules"
  type: hash
  required: false
  schema:
    rules:
      type: array
      description: "Conditions for pipeline creation"
      example:
        - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
        - if: '$CI_COMMIT_BRANCH == "main"'

include:
  description: "External YAML files to include"
  type: array
  required: false
  example:
    - local: '/templates/ci-common.yml'
    - remote: 'https://example.com/ci-template.yml'
  note: "Allows CI/CD configuration reuse"

---
# Job Definition Schema

job_name:
  description: "Individual job configuration"
  type: hash
  required_keys: [script]

  stage:
    type: string
    required: false
    default: "test"
    example: "build"
    note: "Stage this job belongs to"
    validation: "Must be defined in 'stages' list"

  image:
    type: string
    required: false
    example: "ruby:3.2"
    note: "Docker image for job execution"
    documentation: "https://docs.docker.com/docker-hub/repos/"

  services:
    type: array
    required: false
    example: ['postgres:14', 'redis:7']
    note: "Additional Docker containers available during job"

  script:
    type: array
    required: true
    example: ['bundle install', 'bundle exec rspec']
    note: "Commands to execute in job"
    validation: "At least one command required"

  before_script:
    type: array
    required: false
    example: ['echo "Starting job"', 'setup-environment.sh']
    note: "Commands run before 'script'"

  after_script:
    type: array
    required: false
    example: ['cleanup-temp-files.sh']
    note: "Commands run after 'script' (always executed even if job fails)"

  variables:
    type: hash
    required: false
    example:
      DATABASE_URL: "postgresql://localhost/test"
      RAILS_ENV: "test"
    note: "Job-specific environment variables"

  cache:
    type: hash
    required: false
    description: "Files/directories to cache between jobs"
    schema:
      key:
        type: string
        example: "${CI_COMMIT_REF_SLUG}"
        note: "Cache identifier"
      paths:
        type: array
        example: ['node_modules/', '.bundle/']
        note: "Paths to cache"
      policy:
        type: enum
        values: [pull, push, pull-push]
        default: "pull-push"
        note: "pull = download, push = upload, pull-push = both"
      when:
        type: enum
        values: [on_success, on_failure, always]
        default: "on_success"

  artifacts:
    type: hash
    required: false
    description: "Files to preserve after job completes"
    schema:
      name:
        type: string
        example: "${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
        note: "Artifact archive name"
      paths:
        type: array
        required: true
        example: ['build/', 'dist/', '*.log']
        note: "Files/directories to preserve"
      exclude:
        type: array
        example: ['*.tmp', 'cache/']
        note: "Paths to exclude from artifacts"
      expire_in:
        type: string
        default: "30 days"
        example: "1 week"
        note: "How long to keep artifacts"
      when:
        type: enum
        values: [on_success, on_failure, always]
        default: "on_success"
      reports:
        type: hash
        description: "Structured reports for GitLab UI"
        schema:
          junit:
            type: string
            example: "test-reports/*.xml"
          coverage_report:
            type: hash
            schema:
              coverage_format:
                type: enum
                values: [cobertura, jacoco]
              path:
                type: string
                example: "coverage/cobertura.xml"

  dependencies:
    type: array
    required: false
    example: ['build-job', 'test-job']
    note: "Jobs whose artifacts this job needs"
    validation: "Referenced jobs must exist"

  needs:
    type: array
    required: false
    example: ['build-job']
    note: "Jobs that must complete before this job (enables DAG pipelines)"
    documentation: "Allows jobs to run out of stage order"

  rules:
    type: array
    required: false
    description: "Conditions for job execution"
    schema:
      - if:
          type: string
          example: '$CI_COMMIT_BRANCH == "main"'
          note: "CI/CD variable expression"
      - changes:
          type: array
          example: ['src/**/*.rb', 'Gemfile']
          note: "File patterns to watch for changes"
      - exists:
          type: array
          example: ['Dockerfile']
          note: "Files that must exist"
      - when:
          type: enum
          values: [on_success, on_failure, always, manual, delayed]
          default: "on_success"
      - allow_failure:
          type: boolean
          default: false

  only:
    type: hash_or_array
    required: false
    deprecated: true
    note: "Use 'rules' instead for new pipelines"
    example:
      - main
      - tags
      - merge_requests

  except:
    type: hash_or_array
    required: false
    deprecated: true
    note: "Use 'rules' instead for new pipelines"
    example:
      - develop

  tags:
    type: array
    required: false
    example: ['docker', 'linux']
    note: "Runner tags required to execute this job"
    validation: "Runners must have matching tags"

  allow_failure:
    type: boolean
    required: false
    default: false
    note: "If true, pipeline continues even if job fails"

  when:
    type: enum
    required: false
    values: [on_success, on_failure, always, manual, delayed]
    default: "on_success"
    note: "When to run this job"

  timeout:
    type: string
    required: false
    example: "1h 30m"
    note: "Max job execution time"
    validation: "Must be less than project/runner timeout"

  retry:
    type: integer_or_hash
    required: false
    range: [0, 2]
    example: 2
    note: "Number of automatic retries on failure"

  parallel:
    type: integer_or_hash
    required: false
    range: [2, 50]
    example: 5
    note: "Run job in parallel N times"

  environment:
    type: hash_or_string
    required: false
    description: "Deployment environment configuration"
    schema:
      name:
        type: string
        required: true
        example: "production"
      url:
        type: string
        example: "https://myapp.example.com"
      on_stop:
        type: string
        example: "stop-production"
        note: "Job to run when stopping environment"
      auto_stop_in:
        type: string
        example: "1 week"

  coverage:
    type: string
    required: false
    example: '/Coverage: \d+\.\d+%/'
    note: "Regex to extract coverage percentage from job logs"

---
# CI/CD Variables (Available in Jobs)

predefined_variables:
  CI_COMMIT_SHA:
    description: "Git commit SHA"
    example: "a1b2c3d4..."

  CI_COMMIT_SHORT_SHA:
    description: "Short Git commit SHA (8 chars)"
    example: "a1b2c3d4"

  CI_COMMIT_BRANCH:
    description: "Git branch name"
    example: "main"

  CI_COMMIT_TAG:
    description: "Git tag name (if tagged)"
    example: "v1.2.3"

  CI_COMMIT_MESSAGE:
    description: "Full commit message"

  CI_PIPELINE_ID:
    description: "Unique pipeline ID"
    example: "12345"

  CI_PIPELINE_URL:
    description: "Pipeline URL in GitLab UI"

  CI_JOB_ID:
    description: "Unique job ID"

  CI_JOB_NAME:
    description: "Job name from .gitlab-ci.yml"

  CI_JOB_STAGE:
    description: "Stage name"
    example: "build"

  CI_PROJECT_NAME:
    description: "Project name"

  CI_PROJECT_PATH:
    description: "Project namespace and name"
    example: "devops/myapp"

  CI_REGISTRY:
    description: "GitLab container registry URL"
    example: "registry.gitlab.infra.local"

  CI_REGISTRY_IMAGE:
    description: "Full registry image path"
    example: "registry.gitlab.infra.local/devops/myapp"

  CI_REGISTRY_USER:
    description: "Username for registry authentication"

  CI_REGISTRY_PASSWORD:
    description: "Password for registry authentication"

  CI_RUNNER_ID:
    description: "Runner ID executing job"

  CI_RUNNER_TAGS:
    description: "Comma-separated runner tags"

---
# Example Pipeline Configurations

example_basic_pipeline: |
  stages:
    - build
    - test
    - deploy

  variables:
    PROJECT_NAME: "myapp"

  build-job:
    stage: build
    image: debian:12
    script:
      - echo "Building $PROJECT_NAME..."
      - make build
    artifacts:
      paths:
        - build/
      expire_in: 1 week

  test-job:
    stage: test
    image: debian:12
    script:
      - echo "Running tests..."
      - make test
    dependencies:
      - build-job

  deploy-job:
    stage: deploy
    image: debian:12
    script:
      - echo "Deploying to production..."
      - make deploy
    when: manual
    only:
      - main

example_docker_build: |
  stages:
    - build
    - push

  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA

  docker-build:
    stage: build
    image: docker:24
    services:
      - docker:24-dind
    script:
      - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
      - docker build -t $IMAGE_TAG .
      - docker push $IMAGE_TAG

example_ansible_deployment: |
  stages:
    - lint
    - deploy

  ansible-lint:
    stage: lint
    image: python:3.11
    before_script:
      - pip install ansible-lint yamllint
    script:
      - ansible-lint playbooks/
      - yamllint .

  ansible-deploy:
    stage: deploy
    image: python:3.11
    before_script:
      - pip install ansible
      - eval $(ssh-agent -s)
      - echo "$SSH_PRIVATE_KEY" | ssh-add -
    script:
      - ansible-playbook -i inventory playbooks/deploy.yml
    when: manual
    only:
      - main
    environment:
      name: production
      url: https://myapp.infra.local

example_parallel_tests: |
  stages:
    - test

  unit-tests:
    stage: test
    image: ruby:3.2
    parallel: 5
    script:
      - bundle install
      - bundle exec rspec --tag ~slow
    artifacts:
      reports:
        junit: test-reports/rspec-*.xml

---
# Validation Rules

validation_rules:
  - name: "Valid YAML syntax"
    rule: "File must be valid YAML"
    severity: error

  - name: "At least one job defined"
    rule: "Pipeline must have at least one job with 'script' keyword"
    severity: error

  - name: "Stage references valid"
    rule: "Job 'stage' values must be defined in 'stages' list"
    severity: error

  - name: "Dependency jobs exist"
    rule: "Jobs in 'dependencies' or 'needs' must be defined"
    severity: error

  - name: "No circular dependencies"
    rule: "'needs' cannot create circular job dependencies"
    severity: error

  - name: "Runner tags available"
    rule: "At least one runner must have matching 'tags'"
    severity: warning

---
# Configuration Management

validation_command: "gitlab-ci-lint"
validation_description: "GitLab CI Lint API validates .gitlab-ci.yml syntax"
validation_url: "https://gitlab.infra.local/api/v4/ci/lint"

trigger_methods:
  - Git push to branch
  - Merge request creation/update
  - Pipeline schedule (cron)
  - API trigger
  - Manual trigger from UI

---
# Troubleshooting

common_errors:
  - error: "yaml invalid"
    cause: "Invalid YAML syntax in .gitlab-ci.yml"
    solution: "Use GitLab CI Lint tool to validate syntax"

  - error: "This job is stuck because you don't have any active runners"
    cause: "No runners available or no runners with required tags"
    solution: "Check runner status in GitLab Admin > Runners"

  - error: "Job failed: exit code 1"
    cause: "Script command failed"
    solution: "Check job logs for specific error, fix script"

  - error: "Missing dependency: job-name"
    cause: "Referenced job in 'dependencies' doesn't exist or didn't run"
    solution: "Verify job name spelling and that job ran successfully"

---
# References

- GitLab CI/CD YAML reference: https://docs.gitlab.com/ee/ci/yaml/
- CI/CD variables: https://docs.gitlab.com/ee/ci/variables/
- Docker executor: https://docs.gitlab.com/runner/executors/docker.html
- GitLab CI Lint: https://docs.gitlab.com/ee/ci/lint.html
