---
- name: Ensure GitLab Runner template cache directory exists
  ansible.builtin.file:
    path: "{{ gitlab_runner_template_file | dirname }}"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Download template for GitLab Runner container
  ansible.builtin.get_url:
    url: "{{ gitlab_runner_template_url }}"
    dest: "{{ gitlab_runner_template_file }}"
    mode: "0644"
    force: false
  when: not ansible_check_mode

- name: Compose GitLab Runner container network configuration
  ansible.builtin.set_fact:
    gitlab_runner_net0: >-
      name=eth0,bridge={{ gitlab_runner_bridge }}{% if gitlab_runner_vlan_tag %},tag={{ gitlab_runner_vlan_tag }}{% endif %},ip={{ gitlab_runner_ip_config }}{% if gitlab_runner_gateway is defined and gitlab_runner_gateway %},gw={{ gitlab_runner_gateway }}{% endif %}

- name: Ensure GitLab Runner container exists
  ansible.builtin.shell: |
    pct create {{ gitlab_runner_container_id }} {{ gitlab_runner_template_file }} \
      --hostname {{ gitlab_runner_hostname }} \
      --cores {{ gitlab_runner_cores }} \
      --memory {{ gitlab_runner_memory }} \
      --swap {{ gitlab_runner_swap }} \
      --rootfs {{ gitlab_runner_rootfs_storage }}:{{ gitlab_runner_disk }} \
      --net0 {{ gitlab_runner_net0 }} \
      {% if gitlab_runner_unprivileged %}--unprivileged 1{% endif %}
  args:
    creates: "/etc/pve/lxc/{{ gitlab_runner_container_id }}.conf"
  when: not ansible_check_mode

- name: Stat GitLab Runner container configuration
  ansible.builtin.stat:
    path: "/etc/pve/lxc/{{ gitlab_runner_container_id }}.conf"
  register: gitlab_runner_container_conf

- name: Ensure GitLab Runner container onboot flag is set
  ansible.builtin.lineinfile:
    path: "/etc/pve/lxc/{{ gitlab_runner_container_id }}.conf"
    regexp: '^onboot:'
    line: "onboot: {{ 1 if gitlab_runner_start_onboot else 0 }}"
    insertafter: EOF
  when: gitlab_runner_container_conf.stat.exists

- name: Ensure GitLab Runner container DNS servers are set
  ansible.builtin.lineinfile:
    path: "/etc/pve/lxc/{{ gitlab_runner_container_id }}.conf"
    regexp: '^nameserver:'
    line: "nameserver: {{ gitlab_runner_dns_servers | join(' ') }}"
    insertafter: EOF
  when: gitlab_runner_container_conf.stat.exists and gitlab_runner_dns_servers is defined and gitlab_runner_dns_servers | length > 0

- name: Read GitLab Runner container status
  ansible.builtin.command:
    cmd: pct status {{ gitlab_runner_container_id }}
  register: gitlab_runner_status
  changed_when: false
  failed_when: gitlab_runner_status.rc not in [0, 2]
  when: gitlab_runner_container_conf.stat.exists

- name: Start GitLab Runner container
  ansible.builtin.command:
    cmd: pct start {{ gitlab_runner_container_id }}
  when:
    - not ansible_check_mode
    - gitlab_runner_container_conf.stat.exists
    - gitlab_runner_status.rc is defined
    - (gitlab_runner_status.rc != 0 or ('stopped' in gitlab_runner_status.stdout | default('')))

- name: Wait for GitLab Runner container to boot
  ansible.builtin.command:
    cmd: pct exec {{ gitlab_runner_container_id }} -- bash -lc "true"
  register: gitlab_runner_boot_probe
  failed_when: false
  changed_when: false
  retries: 10
  delay: 3
  until: gitlab_runner_boot_probe.rc == 0
  when:
    - not ansible_check_mode
    - gitlab_runner_container_conf.stat.exists

- name: Ensure GitLab Runner root password is set
  ansible.builtin.command:
    cmd: >
      pct exec {{ gitlab_runner_container_id }} -- bash -lc "echo 'root:{{ gitlab_runner_root_password }}' | chpasswd"
  no_log: true
  when:
    - not ansible_check_mode
    - gitlab_runner_container_conf.stat.exists
    - gitlab_runner_root_password is defined
    - gitlab_runner_root_password | length > 0

- name: Check GitLab Runner provisioning marker
  ansible.builtin.command:
    cmd: >
      pct exec {{ gitlab_runner_container_id }} -- bash -lc "test -f /etc/gitlab-runner/.provisioned"
  register: gitlab_runner_provision_marker
  changed_when: false
  failed_when: false
  when: gitlab_runner_container_conf.stat.exists

- name: Install GitLab Runner dependencies
  ansible.builtin.command:
    cmd: >
      pct exec {{ gitlab_runner_container_id }} -- bash -lc "apt-get update && apt-get install -y curl ca-certificates"
  when:
    - not ansible_check_mode
    - gitlab_runner_container_conf.stat.exists
    - gitlab_runner_provision_marker.rc is defined
    - gitlab_runner_provision_marker.rc != 0

- name: Add GitLab Runner repository
  ansible.builtin.command:
    cmd: >
      pct exec {{ gitlab_runner_container_id }} -- bash -lc "curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh | bash"
  when:
    - not ansible_check_mode
    - gitlab_runner_container_conf.stat.exists
    - gitlab_runner_provision_marker.rc is defined
    - gitlab_runner_provision_marker.rc != 0

- name: Install GitLab Runner package
  ansible.builtin.command:
    cmd: >
      pct exec {{ gitlab_runner_container_id }} -- bash -lc "apt-get install -y gitlab-runner"
  when:
    - not ansible_check_mode
    - gitlab_runner_container_conf.stat.exists
    - gitlab_runner_provision_marker.rc is defined
    - gitlab_runner_provision_marker.rc != 0

- name: Register GitLab Runner
  ansible.builtin.command:
    cmd: >
      pct exec {{ gitlab_runner_container_id }} -- bash -lc "gitlab-runner register --non-interactive --url '{{ gitlab_runner_coordinator_url }}' --registration-token '{{ gitlab_runner_registration_token }}' --name '{{ gitlab_runner_description }}' --executor {{ gitlab_runner_executor }}{% if gitlab_runner_tags %} --tag-list '{{ gitlab_runner_tags | join(',') }}'{% endif %}{% if gitlab_runner_additional_registration_args %} {{ gitlab_runner_additional_registration_args | join(' ') }}{% endif %}"
  no_log: true
  when:
    - not ansible_check_mode
    - gitlab_runner_container_conf.stat.exists
    - gitlab_runner_registration_token | length > 0
    - gitlab_runner_provision_marker.rc is defined
    - gitlab_runner_provision_marker.rc != 0

- name: Enable GitLab Runner service
  ansible.builtin.command:
    cmd: >
      pct exec {{ gitlab_runner_container_id }} -- systemctl enable gitlab-runner
  when: not ansible_check_mode and gitlab_runner_container_conf.stat.exists

- name: Ensure GitLab Runner service is running
  ansible.builtin.command:
    cmd: >
      pct exec {{ gitlab_runner_container_id }} -- systemctl start gitlab-runner
  when: not ansible_check_mode and gitlab_runner_container_conf.stat.exists

- name: Touch GitLab Runner provisioning marker
  ansible.builtin.command:
    cmd: >
      pct exec {{ gitlab_runner_container_id }} -- bash -lc "mkdir -p /etc/gitlab-runner && touch /etc/gitlab-runner/.provisioned"
  when:
    - not ansible_check_mode
    - gitlab_runner_container_conf.stat.exists
    - gitlab_runner_provision_marker.rc is defined
    - gitlab_runner_provision_marker.rc != 0
