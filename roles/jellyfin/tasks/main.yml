---
- name: Ensure Jellyfin template cache directory exists
  ansible.builtin.file:
    path: "{{ jellyfin_template_file | dirname }}"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Download template for Jellyfin container
  ansible.builtin.get_url:
    url: "{{ jellyfin_template_url }}"
    dest: "{{ jellyfin_template_file }}"
    mode: "0644"
    force: false
  when: not ansible_check_mode

- name: Compose Jellyfin container network configuration
  ansible.builtin.set_fact:
    jellyfin_net0: >-
      name=eth0,bridge={{ jellyfin_bridge }}{% if jellyfin_vlan_tag %},tag={{ jellyfin_vlan_tag }}{% endif %},ip={{ jellyfin_ip_config }}{% if jellyfin_gateway is defined and jellyfin_gateway %},gw={{ jellyfin_gateway }}{% endif %}

- name: Ensure Jellyfin container exists
  ansible.builtin.shell: |
    pct create {{ jellyfin_container_id }} {{ jellyfin_template_file }} \
      --hostname {{ jellyfin_hostname }} \
      --cores {{ jellyfin_cores }} \
      --memory {{ jellyfin_memory }} \
      --swap {{ jellyfin_swap }} \
      --rootfs {{ jellyfin_rootfs_storage }}:{{ jellyfin_disk }} \
      --net0 {{ jellyfin_net0 }} \
      {% if jellyfin_unprivileged %}--unprivileged 1{% endif %}
  args:
    creates: "/etc/pve/lxc/{{ jellyfin_container_id }}.conf"
  when: not ansible_check_mode

- name: Stat Jellyfin container configuration
  ansible.builtin.stat:
    path: "/etc/pve/lxc/{{ jellyfin_container_id }}.conf"
  register: jellyfin_container_conf

- name: Ensure Jellyfin container onboot flag is set
  ansible.builtin.lineinfile:
    path: "/etc/pve/lxc/{{ jellyfin_container_id }}.conf"
    regexp: '^onboot:'
    line: "onboot: {{ 1 if jellyfin_start_onboot else 0 }}"
    insertafter: EOF
  when: jellyfin_container_conf.stat.exists

- name: Ensure Jellyfin container features list is present
  ansible.builtin.lineinfile:
    path: "/etc/pve/lxc/{{ jellyfin_container_id }}.conf"
    regexp: '^features:'
    line: "features: {{ jellyfin_features | dictsort | map('join', '=') | join(';') }}"
    insertafter: EOF
  when: jellyfin_container_conf.stat.exists and jellyfin_features | length > 0

- name: Ensure Jellyfin container DNS servers are set
  ansible.builtin.lineinfile:
    path: "/etc/pve/lxc/{{ jellyfin_container_id }}.conf"
    regexp: '^nameserver:'
    line: "nameserver: {{ jellyfin_dns_servers | join(' ') }}"
    insertafter: EOF
  when: jellyfin_container_conf.stat.exists and jellyfin_dns_servers is defined and jellyfin_dns_servers | length > 0

- name: Read Jellyfin container status
  ansible.builtin.command:
    cmd: pct status {{ jellyfin_container_id }}
  register: jellyfin_status
  changed_when: false
  failed_when: jellyfin_status.rc not in [0, 2]
  when: jellyfin_container_conf.stat.exists

- name: Start Jellyfin container
  ansible.builtin.command:
    cmd: pct start {{ jellyfin_container_id }}
  when:
    - not ansible_check_mode
    - jellyfin_container_conf.stat.exists
    - jellyfin_status.rc is defined
    - (jellyfin_status.rc != 0 or ('stopped' in jellyfin_status.stdout | default('')))

- name: Wait for Jellyfin container to boot
  ansible.builtin.command:
    cmd: pct exec {{ jellyfin_container_id }} -- bash -lc "true"
  register: jellyfin_boot_probe
  failed_when: false
  changed_when: false
  retries: 10
  delay: 3
  until: jellyfin_boot_probe.rc == 0
  when:
    - not ansible_check_mode
    - jellyfin_container_conf.stat.exists

- name: Ensure Jellyfin root password is set
  ansible.builtin.command:
    cmd: >
      pct exec {{ jellyfin_container_id }} -- bash -lc "echo 'root:{{ jellyfin_root_password }}' | chpasswd"
  no_log: true
  when:
    - not ansible_check_mode
    - jellyfin_container_conf.stat.exists
    - jellyfin_root_password is defined
    - jellyfin_root_password | length > 0

- name: Check Jellyfin provisioning marker
  ansible.builtin.command:
    cmd: >
      pct exec {{ jellyfin_container_id }} -- bash -lc "test -f /etc/jellyfin/.provisioned"
  register: jellyfin_provision_marker
  changed_when: false
  failed_when: false
  when: jellyfin_container_conf.stat.exists

- name: Install Jellyfin repository prerequisites
  ansible.builtin.command:
    cmd: >
      pct exec {{ jellyfin_container_id }} -- bash -lc "apt-get update && apt-get install -y curl gnupg apt-transport-https"
  when:
    - not ansible_check_mode
    - jellyfin_container_conf.stat.exists
    - jellyfin_provision_marker.rc is defined
    - jellyfin_provision_marker.rc != 0

- name: Ensure Jellyfin apt gpg key is present
  ansible.builtin.command:
    cmd: >
      pct exec {{ jellyfin_container_id }} -- bash -lc "if [ ! -f /usr/share/keyrings/jellyfin.gpg ]; then curl -fsSL https://repo.jellyfin.org/debian/jellyfin_team.gpg.key | gpg --dearmor -o /usr/share/keyrings/jellyfin.gpg; fi"
  when:
    - not ansible_check_mode
    - jellyfin_container_conf.stat.exists
    - jellyfin_provision_marker.rc is defined
    - jellyfin_provision_marker.rc != 0

- name: Configure Jellyfin apt repository
  ansible.builtin.command:
    cmd: >
      pct exec {{ jellyfin_container_id }} -- bash -lc "echo 'deb [signed-by=/usr/share/keyrings/jellyfin.gpg] https://repo.jellyfin.org/debian {{ jellyfin_repo_release }} main' > /etc/apt/sources.list.d/jellyfin.list"
  when:
    - not ansible_check_mode
    - jellyfin_container_conf.stat.exists
    - jellyfin_provision_marker.rc is defined
    - jellyfin_provision_marker.rc != 0

- name: Install Jellyfin media server
  ansible.builtin.command:
    cmd: >
      pct exec {{ jellyfin_container_id }} -- bash -lc "apt-get update && apt-get install -y jellyfin"
  when:
    - not ansible_check_mode
    - jellyfin_container_conf.stat.exists
    - jellyfin_provision_marker.rc is defined
    - jellyfin_provision_marker.rc != 0

- name: Ensure Jellyfin service is enabled
  ansible.builtin.command:
    cmd: >
      pct exec {{ jellyfin_container_id }} -- systemctl enable jellyfin
  when:
    - not ansible_check_mode
    - jellyfin_container_conf.stat.exists

- name: Ensure Jellyfin service is running
  ansible.builtin.command:
    cmd: >
      pct exec {{ jellyfin_container_id }} -- systemctl start jellyfin
  when:
    - not ansible_check_mode
    - jellyfin_container_conf.stat.exists

- name: Touch Jellyfin provisioning marker
  ansible.builtin.command:
    cmd: >
      pct exec {{ jellyfin_container_id }} -- bash -lc "mkdir -p /etc/jellyfin && touch /etc/jellyfin/.provisioned"
  when:
    - not ansible_check_mode
    - jellyfin_container_conf.stat.exists
    - jellyfin_provision_marker.rc is defined
    - jellyfin_provision_marker.rc != 0
