---
# =============================================================================
# Portainer Container Management LXC Container Deployment
# =============================================================================
# This role deploys Portainer CE (Community Edition) with Docker support
# for managing containers across single or multiple Docker hosts.
#
# Requirements:
#   - Debian 13 (Trixie) template
#   - Unprivileged LXC container with nesting enabled
#   - Sufficient resources for Docker and Portainer (min 512MB RAM, 8GB disk)
#
# References:
#   - https://www.portainer.io/
#   - https://docs.portainer.io/start/install-ce/server/docker/linux
# =============================================================================

# -----------------------------------------------------------------------------
# Phase 1: Container Creation
# -----------------------------------------------------------------------------

- name: Ensure Portainer template cache directory exists
  ansible.builtin.file:
    path: "{{ portainer_template_file | dirname }}"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Download template for Portainer container
  ansible.builtin.get_url:
    url: "{{ portainer_template_url }}"
    dest: "{{ portainer_template_file }}"
    mode: "0644"
    force: false
  when: not ansible_check_mode

- name: Compose Portainer container network configuration
  ansible.builtin.set_fact:
    portainer_net0: >-
      name=eth0,bridge={{ portainer_bridge }}{% if portainer_vlan_tag %},tag={{ portainer_vlan_tag }}{% endif %},ip={{ portainer_ip_config }}{% if portainer_gateway is defined and portainer_gateway %},gw={{ portainer_gateway }}{% endif %}

- name: Ensure Portainer container exists
  ansible.builtin.shell: |
    pct create {{ portainer_container_id }} {{ portainer_template_file }} \
      --hostname {{ portainer_hostname }} \
      --cores {{ portainer_cores }} \
      --memory {{ portainer_memory }} \
      --swap {{ portainer_swap }} \
      --rootfs {{ portainer_rootfs_storage }}:{{ portainer_disk }} \
      --net0 {{ portainer_net0 }} \
      {% if portainer_unprivileged %}--unprivileged 1{% endif %}
  args:
    creates: "/etc/pve/lxc/{{ portainer_container_id }}.conf"
  when: not ansible_check_mode

- name: Stat Portainer container configuration
  ansible.builtin.stat:
    path: "/etc/pve/lxc/{{ portainer_container_id }}.conf"
  register: portainer_container_conf

# -----------------------------------------------------------------------------
# Phase 2: Container Configuration
# -----------------------------------------------------------------------------

- name: Ensure Portainer container onboot flag is set
  ansible.builtin.lineinfile:
    path: "/etc/pve/lxc/{{ portainer_container_id }}.conf"
    regexp: '^onboot:'
    line: "onboot: {{ 1 if portainer_start_onboot else 0 }}"
    insertafter: EOF
  when: portainer_container_conf.stat.exists

- name: Ensure Portainer container features list is present
  ansible.builtin.lineinfile:
    path: "/etc/pve/lxc/{{ portainer_container_id }}.conf"
    regexp: '^features:'
    line: "features: nesting=1"
    insertafter: EOF
  when: portainer_container_conf.stat.exists
  notify: restart container

- name: Ensure Portainer container DNS servers are set
  ansible.builtin.lineinfile:
    path: "/etc/pve/lxc/{{ portainer_container_id }}.conf"
    regexp: '^nameserver:'
    line: "nameserver: {{ portainer_dns_servers | join(' ') }}"
    insertafter: EOF
  when: portainer_container_conf.stat.exists and portainer_dns_servers is defined and portainer_dns_servers | length > 0

# -----------------------------------------------------------------------------
# Phase 3: Container Startup and Initial Setup
# -----------------------------------------------------------------------------

- name: Read Portainer container status
  ansible.builtin.command:
    cmd: pct status {{ portainer_container_id }}
  register: portainer_status
  changed_when: false
  failed_when: portainer_status.rc not in [0, 2]
  when: portainer_container_conf.stat.exists

- name: Start Portainer container
  ansible.builtin.command:
    cmd: pct start {{ portainer_container_id }}
  when:
    - not ansible_check_mode
    - portainer_container_conf.stat.exists
    - portainer_status.rc is defined
    - (portainer_status.rc != 0 or ('stopped' in portainer_status.stdout | default('')))

- name: Wait for Portainer container to boot
  ansible.builtin.command:
    cmd: pct exec {{ portainer_container_id }} -- bash -lc "true"
  register: portainer_boot_probe
  failed_when: false
  changed_when: false
  retries: 15
  delay: 4
  until: portainer_boot_probe.rc == 0
  when:
    - not ansible_check_mode
    - portainer_container_conf.stat.exists

- name: Ensure Portainer root password is set
  ansible.builtin.command:
    cmd: >
      pct exec {{ portainer_container_id }} -- bash -lc "echo 'root:{{ portainer_root_password }}' | chpasswd"
  no_log: true
  when:
    - not ansible_check_mode
    - portainer_container_conf.stat.exists
    - portainer_root_password is defined
    - portainer_root_password | length > 0

# -----------------------------------------------------------------------------
# Phase 4: Provisioning Check
# -----------------------------------------------------------------------------

- name: Check Portainer provisioning marker
  ansible.builtin.command:
    cmd: >
      pct exec {{ portainer_container_id }} -- bash -lc "test -f /etc/portainer/.provisioned"
  register: portainer_provision_marker
  changed_when: false
  failed_when: false
  when: portainer_container_conf.stat.exists

# -----------------------------------------------------------------------------
# Phase 5: Docker Installation
# -----------------------------------------------------------------------------

- name: Update apt cache
  ansible.builtin.command:
    cmd: >
      pct exec {{ portainer_container_id }} -- bash -lc "apt-get update"
  when:
    - not ansible_check_mode
    - portainer_container_conf.stat.exists
    - portainer_provision_marker.rc is defined
    - portainer_provision_marker.rc != 0
  changed_when: true

- name: Install Docker prerequisites
  ansible.builtin.command:
    cmd: >
      pct exec {{ portainer_container_id }} -- bash -lc "DEBIAN_FRONTEND=noninteractive apt-get install -y
      ca-certificates
      curl
      gnupg
      lsb-release"
  when:
    - not ansible_check_mode
    - portainer_container_conf.stat.exists
    - portainer_provision_marker.rc is defined
    - portainer_provision_marker.rc != 0
  changed_when: true

- name: Add Docker GPG key
  ansible.builtin.command:
    cmd: >
      pct exec {{ portainer_container_id }} -- bash -lc "install -m 0755 -d /etc/apt/keyrings &&
      curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc &&
      chmod a+r /etc/apt/keyrings/docker.asc"
  when:
    - not ansible_check_mode
    - portainer_container_conf.stat.exists
    - portainer_provision_marker.rc is defined
    - portainer_provision_marker.rc != 0
  changed_when: true

- name: Add Docker repository
  ansible.builtin.command:
    cmd: >
      pct exec {{ portainer_container_id }} -- bash -lc "echo \"deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian $(lsb_release -cs) stable\" > /etc/apt/sources.list.d/docker.list"
  when:
    - not ansible_check_mode
    - portainer_container_conf.stat.exists
    - portainer_provision_marker.rc is defined
    - portainer_provision_marker.rc != 0
  changed_when: true

- name: Update apt cache after adding Docker repo
  ansible.builtin.command:
    cmd: >
      pct exec {{ portainer_container_id }} -- bash -lc "apt-get update"
  when:
    - not ansible_check_mode
    - portainer_container_conf.stat.exists
    - portainer_provision_marker.rc is defined
    - portainer_provision_marker.rc != 0
  changed_when: true

- name: Install Docker
  ansible.builtin.command:
    cmd: >
      pct exec {{ portainer_container_id }} -- bash -lc "DEBIAN_FRONTEND=noninteractive apt-get install -y
      docker-ce
      docker-ce-cli
      containerd.io
      docker-buildx-plugin
      docker-compose-plugin"
  when:
    - not ansible_check_mode
    - portainer_container_conf.stat.exists
    - portainer_provision_marker.rc is defined
    - portainer_provision_marker.rc != 0
  changed_when: true

- name: Ensure Docker service is enabled and started
  ansible.builtin.command:
    cmd: >
      pct exec {{ portainer_container_id }} -- bash -lc "systemctl enable docker && systemctl start docker"
  when:
    - not ansible_check_mode
    - portainer_container_conf.stat.exists
    - portainer_provision_marker.rc is defined
    - portainer_provision_marker.rc != 0
  changed_when: true

# -----------------------------------------------------------------------------
# Phase 6: Portainer Deployment
# -----------------------------------------------------------------------------

- name: Ensure compose directory exists on host
  ansible.builtin.file:
    path: "{{ portainer_rootfs_path }}{{ portainer_compose_path }}"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Deploy Portainer docker compose file
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: "{{ portainer_rootfs_path }}{{ portainer_compose_path }}/docker-compose.yml"
    owner: root
    group: root
    mode: "0644"
  notify: restart portainer stack

# -----------------------------------------------------------------------------
# Phase 7: Final Configuration
# -----------------------------------------------------------------------------

- name: Start Portainer stack
  ansible.builtin.command:
    cmd: >
      pct exec {{ portainer_container_id }} -- bash -lc "cd {{ portainer_compose_path }} && docker compose up -d"
  when:
    - not ansible_check_mode
    - portainer_container_conf.stat.exists
    - portainer_provision_marker.rc is defined
    - portainer_provision_marker.rc != 0
  changed_when: true

- name: Touch Portainer provisioning marker
  ansible.builtin.command:
    cmd: >
      pct exec {{ portainer_container_id }} -- bash -lc "mkdir -p /etc/portainer && touch /etc/portainer/.provisioned"
  when:
    - not ansible_check_mode
    - portainer_container_conf.stat.exists
    - portainer_provision_marker.rc is defined
    - portainer_provision_marker.rc != 0
  changed_when: true

- name: Display Portainer access information
  ansible.builtin.debug:
    msg:
      - "Portainer has been deployed successfully!"
      - "Access the web interface at:"
      - "  - HTTP:  http://{{ portainer_hostname }}.{{ portainer_domain }}:{{ portainer_service_port_http }}"
      - "  - HTTPS: https://{{ portainer_hostname }}.{{ portainer_domain }}:{{ portainer_service_port_https }}"
      - "  - Or via Traefik: https://{{ portainer_public_hostname }}"
      - ""
      - "Initial setup:"
      - "  1. Open the web interface within 5 minutes of first start"
      - "  2. Create an admin user account"
      - "  3. Select 'Docker' as the environment to manage"
      - "  4. Click 'Connect' to connect to the local Docker instance"
  when:
    - portainer_container_conf.stat.exists
    - portainer_provision_marker.rc is defined
    - portainer_provision_marker.rc != 0
