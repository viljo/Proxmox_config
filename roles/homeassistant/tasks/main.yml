---
# =============================================================================
# Home Assistant Supervised LXC Container Deployment
# =============================================================================
# This role deploys Home Assistant Supervised with full add-on support
# using Docker as the container runtime for the Supervisor and add-ons.
#
# Requirements:
#   - Debian 12 (Bookworm) template
#   - Privileged LXC container with nesting enabled
#   - Sufficient resources for Docker and add-ons (min 2GB RAM, 32GB disk)
#
# References:
#   - https://github.com/home-assistant/supervised-installer
#   - Spec: specs/active/009-home-assistant-supervised/spec.md
# =============================================================================

# -----------------------------------------------------------------------------
# Phase 1: Container Creation
# -----------------------------------------------------------------------------

- name: Ensure Home Assistant template cache directory exists
  ansible.builtin.file:
    path: "{{ ha_template_file | dirname }}"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Download template for Home Assistant container
  ansible.builtin.get_url:
    url: "{{ ha_template_url }}"
    dest: "{{ ha_template_file }}"
    mode: "0644"
    force: false
  when: not ansible_check_mode

- name: Compose Home Assistant container network configuration
  ansible.builtin.set_fact:
    ha_net0: >-
      name=eth0,bridge={{ ha_bridge }}{% if ha_vlan_tag %},tag={{ ha_vlan_tag }}{% endif %},ip={{ ha_ip_config }}{% if ha_gateway is defined and ha_gateway %},gw={{ ha_gateway }}{% endif %}

- name: Ensure Home Assistant container exists
  ansible.builtin.shell: |
    pct create {{ ha_container_id }} {{ ha_template_file }} \
      --hostname {{ ha_hostname }} \
      --cores {{ ha_cores }} \
      --memory {{ ha_memory }} \
      --swap {{ ha_swap }} \
      --rootfs {{ ha_rootfs_storage }}:{{ ha_disk }} \
      --net0 {{ ha_net0 }} \
      {% if not ha_unprivileged %}--unprivileged 0{% endif %}
  args:
    creates: "/etc/pve/lxc/{{ ha_container_id }}.conf"
  when: not ansible_check_mode

- name: Stat Home Assistant container configuration
  ansible.builtin.stat:
    path: "/etc/pve/lxc/{{ ha_container_id }}.conf"
  register: ha_container_conf

# -----------------------------------------------------------------------------
# Phase 2: Container Configuration
# -----------------------------------------------------------------------------

- name: Ensure Home Assistant container onboot flag is set
  ansible.builtin.lineinfile:
    path: "/etc/pve/lxc/{{ ha_container_id }}.conf"
    regexp: '^onboot:'
    line: "onboot: {{ 1 if ha_start_onboot else 0 }}"
    insertafter: EOF
  when: ha_container_conf.stat.exists

- name: Ensure Home Assistant container features list is present
  ansible.builtin.lineinfile:
    path: "/etc/pve/lxc/{{ ha_container_id }}.conf"
    regexp: '^features:'
    line: "features: nesting=1"
    insertafter: EOF
  when: ha_container_conf.stat.exists
  notify: restart container

- name: Ensure Home Assistant container DNS servers are set
  ansible.builtin.lineinfile:
    path: "/etc/pve/lxc/{{ ha_container_id }}.conf"
    regexp: '^nameserver:'
    line: "nameserver: {{ ha_dns_servers | join(' ') }}"
    insertafter: EOF
  when: ha_container_conf.stat.exists and ha_dns_servers is defined and ha_dns_servers | length > 0

# -----------------------------------------------------------------------------
# Phase 3: Container Startup and Initial Setup
# -----------------------------------------------------------------------------

- name: Read Home Assistant container status
  ansible.builtin.command:
    cmd: pct status {{ ha_container_id }}
  register: ha_status
  changed_when: false
  failed_when: ha_status.rc not in [0, 2]
  when: ha_container_conf.stat.exists

- name: Start Home Assistant container
  ansible.builtin.command:
    cmd: pct start {{ ha_container_id }}
  when:
    - not ansible_check_mode
    - ha_container_conf.stat.exists
    - ha_status.rc is defined
    - (ha_status.rc != 0 or ('stopped' in ha_status.stdout | default('')))

- name: Wait for Home Assistant container to boot
  ansible.builtin.command:
    cmd: pct exec {{ ha_container_id }} -- bash -lc "true"
  register: ha_boot_probe
  failed_when: false
  changed_when: false
  retries: 15
  delay: 4
  until: ha_boot_probe.rc == 0
  when:
    - not ansible_check_mode
    - ha_container_conf.stat.exists

- name: Ensure Home Assistant root password is set
  ansible.builtin.command:
    cmd: >
      pct exec {{ ha_container_id }} -- bash -lc "echo 'root:{{ ha_root_password }}' | chpasswd"
  no_log: true
  when:
    - not ansible_check_mode
    - ha_container_conf.stat.exists
    - ha_root_password is defined
    - ha_root_password | length > 0

# -----------------------------------------------------------------------------
# Phase 4: Provisioning Check
# -----------------------------------------------------------------------------

- name: Check Home Assistant provisioning marker
  ansible.builtin.command:
    cmd: >
      pct exec {{ ha_container_id }} -- bash -lc "test -f /etc/homeassistant/.provisioned"
  register: ha_provision_marker
  changed_when: false
  failed_when: false
  when: ha_container_conf.stat.exists

# -----------------------------------------------------------------------------
# Phase 5: System Prerequisites
# -----------------------------------------------------------------------------

- name: Update apt cache
  ansible.builtin.command:
    cmd: >
      pct exec {{ ha_container_id }} -- bash -lc "apt-get update"
  when:
    - not ansible_check_mode
    - ha_container_conf.stat.exists
    - ha_provision_marker.rc is defined
    - ha_provision_marker.rc != 0
  changed_when: true

- name: Install Home Assistant Supervised prerequisites
  ansible.builtin.command:
    cmd: >
      pct exec {{ ha_container_id }} -- bash -lc "DEBIAN_FRONTEND=noninteractive apt-get install -y
      apparmor
      cifs-utils
      curl
      dbus
      jq
      libglib2.0-bin
      lsb-release
      network-manager
      nfs-common
      systemd-journal-remote
      systemd-resolved
      udisks2
      wget"
  when:
    - not ansible_check_mode
    - ha_container_conf.stat.exists
    - ha_provision_marker.rc is defined
    - ha_provision_marker.rc != 0
  changed_when: true

# -----------------------------------------------------------------------------
# Phase 6: Docker Installation
# -----------------------------------------------------------------------------

- name: Check if Docker is already installed
  ansible.builtin.command:
    cmd: >
      pct exec {{ ha_container_id }} -- bash -lc "which docker"
  register: docker_check
  changed_when: false
  failed_when: false
  when: ha_container_conf.stat.exists

- name: Install Docker prerequisites
  ansible.builtin.command:
    cmd: >
      pct exec {{ ha_container_id }} -- bash -lc "DEBIAN_FRONTEND=noninteractive apt-get install -y
      ca-certificates
      curl
      gnupg
      lsb-release"
  when:
    - not ansible_check_mode
    - ha_container_conf.stat.exists
    - docker_check.rc != 0
  changed_when: true

- name: Add Docker GPG key
  ansible.builtin.command:
    cmd: >
      pct exec {{ ha_container_id }} -- bash -lc "install -m 0755 -d /etc/apt/keyrings &&
      curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc &&
      chmod a+r /etc/apt/keyrings/docker.asc"
  when:
    - not ansible_check_mode
    - ha_container_conf.stat.exists
    - docker_check.rc != 0
  changed_when: true

- name: Add Docker repository
  ansible.builtin.command:
    cmd: >
      pct exec {{ ha_container_id }} -- bash -lc "echo \"deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian $(lsb_release -cs) stable\" > /etc/apt/sources.list.d/docker.list"
  when:
    - not ansible_check_mode
    - ha_container_conf.stat.exists
    - docker_check.rc != 0
  changed_when: true

- name: Update apt cache after adding Docker repo
  ansible.builtin.command:
    cmd: >
      pct exec {{ ha_container_id }} -- bash -lc "apt-get update"
  when:
    - not ansible_check_mode
    - ha_container_conf.stat.exists
    - docker_check.rc != 0
  changed_when: true

- name: Install Docker
  ansible.builtin.command:
    cmd: >
      pct exec {{ ha_container_id }} -- bash -lc "DEBIAN_FRONTEND=noninteractive apt-get install -y
      docker-ce
      docker-ce-cli
      containerd.io
      docker-buildx-plugin
      docker-compose-plugin"
  when:
    - not ansible_check_mode
    - ha_container_conf.stat.exists
    - docker_check.rc != 0
  changed_when: true

- name: Ensure Docker service is enabled and started
  ansible.builtin.command:
    cmd: >
      pct exec {{ ha_container_id }} -- bash -lc "systemctl enable docker && systemctl start docker"
  when:
    - not ansible_check_mode
    - ha_container_conf.stat.exists
    - docker_check.rc != 0
  changed_when: true

# -----------------------------------------------------------------------------
# Phase 7: Home Assistant Supervised Installation
# -----------------------------------------------------------------------------

- name: Check if Home Assistant Supervised is already installed
  ansible.builtin.command:
    cmd: >
      pct exec {{ ha_container_id }} -- bash -lc "test -f /usr/bin/ha"
  register: ha_supervised_check
  changed_when: false
  failed_when: false
  when: ha_container_conf.stat.exists

- name: Download Home Assistant Supervised installer
  ansible.builtin.command:
    cmd: >
      pct exec {{ ha_container_id }} -- bash -lc "wget -O /tmp/homeassistant-supervised.deb {{ ha_supervised_installer_url }}"
  when:
    - not ansible_check_mode
    - ha_container_conf.stat.exists
    - ha_supervised_check.rc != 0
  changed_when: true

- name: Install Home Assistant Supervised
  ansible.builtin.command:
    cmd: >
      pct exec {{ ha_container_id }} -- bash -lc "DEBIAN_FRONTEND=noninteractive apt-get install -y /tmp/homeassistant-supervised.deb"
  environment:
    BYPASS_OS_CHECK: "true"
  when:
    - not ansible_check_mode
    - ha_container_conf.stat.exists
    - ha_supervised_check.rc != 0
  changed_when: true

- name: Remove installer package
  ansible.builtin.command:
    cmd: >
      pct exec {{ ha_container_id }} -- bash -lc "rm -f /tmp/homeassistant-supervised.deb"
  when:
    - not ansible_check_mode
    - ha_container_conf.stat.exists
    - ha_supervised_check.rc != 0
  changed_when: true

# -----------------------------------------------------------------------------
# Phase 8: Final Configuration
# -----------------------------------------------------------------------------

- name: Wait for Home Assistant Supervisor to initialize
  ansible.builtin.command:
    cmd: >
      pct exec {{ ha_container_id }} -- bash -lc "systemctl is-active hassio-supervisor"
  register: supervisor_status
  retries: 30
  delay: 10
  until: supervisor_status.rc == 0
  failed_when: false
  changed_when: false
  when:
    - not ansible_check_mode
    - ha_container_conf.stat.exists
    - ha_supervised_check.rc != 0

- name: Touch Home Assistant provisioning marker
  ansible.builtin.command:
    cmd: >
      pct exec {{ ha_container_id }} -- bash -lc "mkdir -p /etc/homeassistant && touch /etc/homeassistant/.provisioned"
  when:
    - not ansible_check_mode
    - ha_container_conf.stat.exists
    - ha_provision_marker.rc is defined
    - ha_provision_marker.rc != 0
  changed_when: true

- name: Display Home Assistant access information
  ansible.builtin.debug:
    msg:
      - "Home Assistant Supervised has been deployed successfully!"
      - "Access the web interface at: http://{{ ha_hostname }}.{{ ha_domain }}:8123"
      - "Or via Traefik: https://{{ ha_public_hostname }}"
      - "Initial setup may take 10-20 minutes while Home Assistant downloads and starts."
      - "The Supervisor will be available in the sidebar once fully initialized."
  when:
    - ha_container_conf.stat.exists
    - ha_supervised_check.rc != 0
