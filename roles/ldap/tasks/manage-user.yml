---
- name: Define LDAP user DN for {{ ldap_user.uid }}
  ansible.builtin.set_fact:
    ldap_current_user_dn: "uid={{ ldap_user.uid }},{{ ldap_people_base_dn }}"

- name: Check if LDAP user {{ ldap_user.uid }} exists
  ansible.builtin.command:
    cmd: ldapsearch -LLL -Y EXTERNAL -H ldapi:/// -b "{{ ldap_current_user_dn }}" dn
  register: ldap_user_lookup
  changed_when: false
  failed_when: ldap_user_lookup.rc not in [0, 32]

- name: Hash LDAP password for {{ ldap_user.uid }}
  ansible.builtin.command:
    cmd: slappasswd -s "{{ ldap_user.password }}"
  register: ldap_user_hash
  changed_when: false
  no_log: true
  when: ldap_user_lookup.rc == 32

- name: Render LDAP user LDIF for {{ ldap_user.uid }}
  ansible.builtin.template:
    src: user.ldif.j2
    dest: "/tmp/ldap-user-{{ ldap_user.uid }}.ldif"
    owner: root
    group: root
    mode: "0600"
  vars:
    ldap_user_dn: "{{ ldap_current_user_dn }}"
    ldap_user_hashed_password: "{{ ldap_user_hash.stdout }}"
  when: ldap_user_lookup.rc == 32
  no_log: true

- name: Create LDAP user {{ ldap_user.uid }}
  ansible.builtin.command:
    cmd: ldapadd -Y EXTERNAL -H ldapi:/// -f /tmp/ldap-user-{{ ldap_user.uid }}.ldif
  when: ldap_user_lookup.rc == 32
  no_log: true

- name: Remove temporary LDAP user LDIF for {{ ldap_user.uid }}
  ansible.builtin.file:
    path: "/tmp/ldap-user-{{ ldap_user.uid }}.ldif"
    state: absent
  when: ldap_user_lookup.rc == 32
  no_log: true

- name: Determine LDAP groups for {{ ldap_user.uid }}
  ansible.builtin.set_fact:
    ldap_user_effective_groups: "{{ (ldap_default_user_groups | default(['users'])) | union(ldap_user.groups | default([])) }}"

- name: Ensure LDAP user group memberships for {{ ldap_user.uid }}
  ansible.builtin.include_tasks: manage-membership.yml
  loop: "{{ ldap_user_effective_groups | default([]) }}"
  loop_control:
    loop_var: ldap_membership_group
