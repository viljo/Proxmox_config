---
- name: Ensure Cosmos template cache directory exists
  ansible.builtin.file:
    path: "{{ cosmos_template_file | dirname }}"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Download template for Cosmos container
  ansible.builtin.get_url:
    url: "{{ cosmos_template_url }}"
    dest: "{{ cosmos_template_file }}"
    mode: "0644"
    force: false
  when: not ansible_check_mode

- name: Compose Cosmos container network configuration
  ansible.builtin.set_fact:
    cosmos_net0: >-
      name=eth0,bridge={{ cosmos_bridge }}{% if cosmos_vlan_tag %},tag={{ cosmos_vlan_tag }}{% endif %},ip={{ cosmos_ip_config }}{% if cosmos_gateway is defined and cosmos_gateway %},gw={{ cosmos_gateway }}{% endif %}

- name: Ensure Cosmos container exists
  ansible.builtin.shell: |
    pct create {{ cosmos_container_id }} {{ cosmos_template_file }} \
      --hostname {{ cosmos_hostname }} \
      --cores {{ cosmos_cores }} \
      --memory {{ cosmos_memory }} \
      --swap {{ cosmos_swap }} \
      --rootfs {{ cosmos_rootfs_storage }}:{{ cosmos_disk }} \
      --net0 {{ cosmos_net0 }} \
      {% if cosmos_unprivileged %}--unprivileged 1{% endif %}
  args:
    creates: "/etc/pve/lxc/{{ cosmos_container_id }}.conf"
  when: not ansible_check_mode

- name: Stat Cosmos container configuration
  ansible.builtin.stat:
    path: "/etc/pve/lxc/{{ cosmos_container_id }}.conf"
  register: cosmos_container_conf

- name: Ensure Cosmos container onboot flag is set
  ansible.builtin.lineinfile:
    path: "/etc/pve/lxc/{{ cosmos_container_id }}.conf"
    regexp: '^onboot:'
    line: "onboot: {{ 1 if cosmos_start_onboot else 0 }}"
    insertafter: EOF
  when: cosmos_container_conf.stat.exists

- name: Read Cosmos container status
  ansible.builtin.command:
    cmd: pct status {{ cosmos_container_id }}
  register: cosmos_status
  changed_when: false
  failed_when: cosmos_status.rc not in [0, 2]
  when: cosmos_container_conf.stat.exists

- name: Start Cosmos container
  ansible.builtin.command:
    cmd: pct start {{ cosmos_container_id }}
  when:
    - not ansible_check_mode
    - cosmos_container_conf.stat.exists
    - cosmos_status.rc is defined
    - (cosmos_status.rc != 0 or ('stopped' in cosmos_status.stdout | default('')))

- name: Wait for Cosmos container to boot
  ansible.builtin.command:
    cmd: pct exec {{ cosmos_container_id }} -- bash -lc "true"
  register: cosmos_boot_probe
  failed_when: false
  changed_when: false
  retries: 10
  delay: 3
  until: cosmos_boot_probe.rc == 0
  when:
    - not ansible_check_mode
    - cosmos_container_conf.stat.exists

- name: Ensure Cosmos root password is set
  ansible.builtin.command:
    cmd: >
      pct exec {{ cosmos_container_id }} -- bash -lc "echo 'root:{{ cosmos_root_password }}' | chpasswd"
  no_log: true
  when:
    - not ansible_check_mode
    - cosmos_container_conf.stat.exists
    - cosmos_root_password is defined
    - cosmos_root_password | length > 0

- name: Check Cosmos provisioning marker
  ansible.builtin.command:
    cmd: >
      pct exec {{ cosmos_container_id }} -- bash -lc "test -f /etc/cosmos/.provisioned"
  register: cosmos_provision_marker
  changed_when: false
  failed_when: false
  when: cosmos_container_conf.stat.exists

- name: Install Docker for Cosmos
  ansible.builtin.command:
    cmd: >
      pct exec {{ cosmos_container_id }} -- bash -lc "apt-get update && apt-get install -y docker.io docker-compose-plugin"
  when:
    - not ansible_check_mode
    - cosmos_container_conf.stat.exists
    - cosmos_provision_marker.rc is defined
    - cosmos_provision_marker.rc != 0

- name: Ensure Cosmos compose directory exists on host
  ansible.builtin.file:
    path: "{{ cosmos_rootfs_path }}{{ cosmos_compose_path }}"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Deploy Cosmos docker compose file
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: "{{ cosmos_rootfs_path }}{{ cosmos_compose_path }}/docker-compose.yml"
    owner: root
    group: root
    mode: "0644"
  notify: restart cosmos stack

- name: Touch Cosmos provisioning marker
  ansible.builtin.command:
    cmd: >
      pct exec {{ cosmos_container_id }} -- bash -lc "mkdir -p /etc/cosmos && touch /etc/cosmos/.provisioned"
  when:
    - not ansible_check_mode
    - cosmos_container_conf.stat.exists
    - cosmos_provision_marker.rc is defined
    - cosmos_provision_marker.rc != 0
