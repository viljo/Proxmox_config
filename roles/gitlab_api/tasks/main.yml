---
# GitLab CE DevOps Platform deployment via Proxmox API

- name: Create gitlab container via Proxmox API
  community.proxmox.proxmox:
    api_host: "{{ proxmox_api_host }}"
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_password }}"
    
    validate_certs: "{{ proxmox_api_validate_certs }}"
    node: "{{ proxmox_node }}"
    vmid: "{{ gitlab_container_id }}"
    hostname: "{{ gitlab_hostname }}"
    ostemplate: "local:vztmpl/{{ gitlab_template_file }}"
    cores: "{{ gitlab_cores }}"
    memory: "{{ gitlab_memory }}"
    swap: "{{ gitlab_swap }}"
    disk: "{{ gitlab_rootfs_storage }}:{{ gitlab_disk }}"
    netif:
      net0: "name=eth0,bridge={{ gitlab_bridge }},ip={{ gitlab_ip_address }}/{{ gitlab_netmask }},gw={{ gitlab_gateway }},type=veth"
    nameserver: "{{ gitlab_dns_servers | join(' ') }}"
    unprivileged: "{{ gitlab_unprivileged }}"
    onboot: true
    password: "{{ gitlab_container_root_password }}"
    pubkey: "{{ proxmox_root_authorized_keys | join('\n') }}"
    state: present
  register: gitlab_container

- name: Enable nesting feature for Docker support
  ansible.builtin.command:
    cmd: "pct set {{ gitlab_container_id }} --features {{ gitlab_features }}"
  when: gitlab_container.changed
  delegate_to: "{{ inventory_hostname }}"

- name: Start gitlab container via Proxmox API
  community.proxmox.proxmox:
    api_host: "{{ proxmox_api_host }}"
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_password }}"
    
    validate_certs: "{{ proxmox_api_validate_certs }}"
    node: "{{ proxmox_node }}"
    vmid: "{{ gitlab_container_id }}"
    state: started

- name: Wait for gitlab container SSH to be available
  ansible.builtin.wait_for:
    host: "{{ gitlab_ip_address }}"
    port: 22
    delay: 5
    timeout: 60
  delegate_to: "{{ inventory_hostname }}"

- name: Add gitlab to in-memory inventory for delegation
  ansible.builtin.add_host:
    name: gitlab_container
    ansible_host: "{{ gitlab_ip_address }}"
    ansible_user: root
    ansible_password: "{{ gitlab_container_root_password }}"
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ProxyCommand="ssh -W %h:%p -q root@{{ hostvars[inventory_hostname].ansible_host }}"'
    groups: containers

- name: Install required system packages
  ansible.builtin.apt:
    name:
      - ca-certificates
      - curl
      - gnupg
      - locales
      - openssh-server
      - postfix
    state: present
    update_cache: yes
  delegate_to: gitlab_container

- name: Generate en_US.UTF-8 locale
  ansible.builtin.command:
    cmd: locale-gen en_US.UTF-8
  delegate_to: gitlab_container
  changed_when: false

- name: Set system locale
  ansible.builtin.copy:
    content: |
      LANG=en_US.UTF-8
      LC_ALL=en_US.UTF-8
    dest: /etc/default/locale
  delegate_to: gitlab_container

- name: Create Docker repository keyring directory
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'
  delegate_to: gitlab_container

- name: Add Docker GPG key
  ansible.builtin.shell:
    cmd: curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    creates: /etc/apt/keyrings/docker.gpg
  delegate_to: gitlab_container

- name: Add Docker repository
  ansible.builtin.apt_repository:
    repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian bookworm stable"
    state: present
    filename: docker
  delegate_to: gitlab_container

- name: Install Docker and Docker Compose
  ansible.builtin.apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-compose-plugin
    state: present
    update_cache: yes
  delegate_to: gitlab_container

- name: Enable and start Docker service
  ansible.builtin.systemd:
    name: docker
    enabled: yes
    state: started
  delegate_to: gitlab_container

- name: Create GitLab data directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  loop:
    - "{{ gitlab_data_dir }}"
    - "{{ gitlab_data_dir }}/config"
    - "{{ gitlab_data_dir }}/logs"
    - "{{ gitlab_data_dir }}/data"
  delegate_to: gitlab_container

- name: Deploy Docker Compose configuration
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: "{{ gitlab_compose_file }}"
    mode: '0644'
  delegate_to: gitlab_container
  notify: Restart gitlab

- name: Start GitLab via Docker Compose
  community.docker.docker_compose_v2:
    project_src: "{{ gitlab_data_dir }}"
    state: present
  delegate_to: gitlab_container

- name: Wait for GitLab to be ready (this may take 5-10 minutes)
  ansible.builtin.command:
    cmd: "curl -f http://localhost/-/health"
  register: gitlab_health
  until: gitlab_health.rc == 0
  retries: 60
  delay: 10
  changed_when: false
  delegate_to: gitlab_container

- name: Display gitlab configuration
  ansible.builtin.debug:
    msg:
      - "GitLab CE {{ gitlab_version }} deployed successfully"
      - "  Container ID: {{ gitlab_container_id }}"
      - "  IP: {{ gitlab_ip_address }}"
      - "  Internal URL: http://{{ gitlab_ip_address }}/"
      - "  External URL: {{ gitlab_external_url }}"
      - "  Root user: root"
      - "  Database: {{ gitlab_db_host }}:{{ gitlab_db_port }}/{{ gitlab_db_name }}"
      - "  Redis: {{ gitlab_redis_host }}:{{ gitlab_redis_port }}"
      - "  Note: Initial startup may take 5-10 minutes"
