---
- name: Ensure Coolify template cache directory exists
  ansible.builtin.file:
    path: "{{ coolify_template_file | dirname }}"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Download template for Coolify container
  ansible.builtin.get_url:
    url: "{{ coolify_template_url }}"
    dest: "{{ coolify_template_file }}"
    mode: "0644"
    force: false
  when: not ansible_check_mode

- name: Compose Coolify container network configuration
  ansible.builtin.set_fact:
    coolify_net0: >-
      name=eth0,bridge={{ coolify_bridge }}{% if coolify_vlan_tag %},tag={{ coolify_vlan_tag }}{% endif %},ip={{ coolify_ip_config }}{% if coolify_gateway is defined and coolify_gateway %},gw={{ coolify_gateway }}{% endif %}

- name: Ensure Coolify container exists
  ansible.builtin.shell: |
    pct create {{ coolify_container_id }} {{ coolify_template_file }} \
      --hostname {{ coolify_hostname }} \
      --cores {{ coolify_cores }} \
      --memory {{ coolify_memory }} \
      --swap {{ coolify_swap }} \
      --rootfs {{ coolify_rootfs_storage }}:{{ coolify_disk }} \
      --net0 {{ coolify_net0 }} \
      {% if coolify_unprivileged %}--unprivileged 1{% endif %}
  args:
    creates: "/etc/pve/lxc/{{ coolify_container_id }}.conf"
  when: not ansible_check_mode

- name: Stat Coolify container configuration
  ansible.builtin.stat:
    path: "/etc/pve/lxc/{{ coolify_container_id }}.conf"
  register: coolify_container_conf

- name: Ensure Coolify container network configuration
  ansible.builtin.command:
    cmd: >
      pct set {{ coolify_container_id }} --net0 {{ coolify_net0 }}
  when: not ansible_check_mode and coolify_container_conf.stat.exists

- name: Ensure Coolify container onboot flag is set
  ansible.builtin.lineinfile:
    path: "/etc/pve/lxc/{{ coolify_container_id }}.conf"
    regexp: '^onboot:'
    line: "onboot: {{ 1 if coolify_start_onboot else 0 }}"
    insertafter: EOF
  when: coolify_container_conf.stat.exists

- name: Ensure Coolify container features list is present
  ansible.builtin.lineinfile:
    path: "/etc/pve/lxc/{{ coolify_container_id }}.conf"
    regexp: '^features:'
    line: "features: {{ coolify_features | dictsort | map('join', '=') | join(';') }}"
    insertafter: EOF
  when: coolify_container_conf.stat.exists and coolify_features | length > 0

- name: Ensure Coolify container DNS servers are set
  ansible.builtin.lineinfile:
    path: "/etc/pve/lxc/{{ coolify_container_id }}.conf"
    regexp: '^nameserver:'
    line: "nameserver: {{ coolify_dns_servers | join(' ') }}"
    insertafter: EOF
  when: coolify_container_conf.stat.exists and coolify_dns_servers is defined and coolify_dns_servers | length > 0

- name: Read Coolify container status
  ansible.builtin.command:
    cmd: pct status {{ coolify_container_id }}
  register: coolify_status
  changed_when: false
  failed_when: coolify_status.rc not in [0, 2]
  when: coolify_container_conf.stat.exists

- name: Start Coolify container
  ansible.builtin.command:
    cmd: pct start {{ coolify_container_id }}
  when:
    - not ansible_check_mode
    - coolify_container_conf.stat.exists
    - coolify_status.rc is defined
    - (coolify_status.rc != 0 or ('stopped' in coolify_status.stdout | default('')))

- name: Wait for Coolify container to boot
  ansible.builtin.command:
    cmd: pct exec {{ coolify_container_id }} -- bash -lc "true"
  register: coolify_boot_probe
  failed_when: false
  changed_when: false
  retries: 15
  delay: 3
  until: coolify_boot_probe.rc == 0
  when:
    - not ansible_check_mode
    - coolify_container_conf.stat.exists

- name: Ensure Coolify root password is set
  ansible.builtin.command:
    cmd: >
      pct exec {{ coolify_container_id }} -- bash -lc "echo 'root:{{ coolify_root_password }}' | chpasswd"
  no_log: true
  when:
    - not ansible_check_mode
    - coolify_container_conf.stat.exists
    - coolify_root_password is defined
    - coolify_root_password | length > 0

- name: Check Coolify provisioning marker
  ansible.builtin.command:
    cmd: >
      pct exec {{ coolify_container_id }} -- bash -lc "test -f /etc/coolify/.provisioned"
  register: coolify_provision_marker
  changed_when: false
  failed_when: false
  when: coolify_container_conf.stat.exists

- name: Install Docker stack for Coolify
  ansible.builtin.command:
    cmd: >
      pct exec {{ coolify_container_id }} -- bash -lc "apt-get update && apt-get install -y docker.io docker-compose-plugin curl"
  when:
    - not ansible_check_mode
    - coolify_container_conf.stat.exists
    - coolify_provision_marker.rc is defined
    - coolify_provision_marker.rc != 0

- name: Ensure Coolify compose directory exists on host
  ansible.builtin.file:
    path: "{{ coolify_rootfs_path }}{{ coolify_compose_path }}"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Ensure Coolify data directory exists on host
  ansible.builtin.file:
    path: "{{ coolify_rootfs_path }}{{ coolify_data_path }}/source"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Render Coolify docker compose file
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: "{{ coolify_rootfs_path }}{{ coolify_compose_path }}/docker-compose.yml"
    owner: root
    group: root
    mode: "0644"
  notify: restart coolify stack

- name: Touch Coolify provisioning marker
  ansible.builtin.command:
    cmd: >
      pct exec {{ coolify_container_id }} -- bash -lc "mkdir -p /etc/coolify && touch /etc/coolify/.provisioned"
  when:
    - not ansible_check_mode
    - coolify_container_conf.stat.exists
    - coolify_provision_marker.rc is defined
    - coolify_provision_marker.rc != 0
