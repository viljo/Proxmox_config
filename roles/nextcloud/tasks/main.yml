---
- name: Ensure Nextcloud template cache directory exists
  ansible.builtin.file:
    path: "{{ nc_template_file | dirname }}"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Download template for Nextcloud container
  ansible.builtin.get_url:
    url: "{{ nc_template_url }}"
    dest: "{{ nc_template_file }}"
    mode: "0644"
    force: false
  when: not ansible_check_mode

- name: Compose Nextcloud container network configuration
  ansible.builtin.set_fact:
    nc_net0: >-
      name=eth0,bridge={{ nc_bridge }}{% if nc_vlan_tag %},tag={{ nc_vlan_tag }}{% endif %},ip={{ nc_ip_config }}{% if nc_gateway is defined and nc_gateway %},gw={{ nc_gateway }}{% endif %}

- name: Ensure Nextcloud container exists
  ansible.builtin.shell: |
    pct create {{ nc_container_id }} {{ nc_template_file }} \
      --hostname {{ nc_hostname }} \
      --cores {{ nc_cores }} \
      --memory {{ nc_memory }} \
      --swap {{ nc_swap }} \
      --rootfs {{ nc_rootfs_storage }}:{{ nc_disk }} \
      --net0 {{ nc_net0 }} \
      {% if nc_unprivileged %}--unprivileged 1{% endif %}
  args:
    creates: "/etc/pve/lxc/{{ nc_container_id }}.conf"
  when: not ansible_check_mode

- name: Stat Nextcloud container configuration
  ansible.builtin.stat:
    path: "/etc/pve/lxc/{{ nc_container_id }}.conf"
  register: nc_container_conf

- name: Ensure Nextcloud container network configuration
  ansible.builtin.command:
    cmd: >
      pct set {{ nc_container_id }} --net0 {{ nc_net0 }}
  when: not ansible_check_mode and nc_container_conf.stat.exists

- name: Ensure Nextcloud container onboot flag is set
  ansible.builtin.lineinfile:
    path: "/etc/pve/lxc/{{ nc_container_id }}.conf"
    regexp: '^onboot:'
    line: "onboot: {{ 1 if nc_start_onboot else 0 }}"
    insertafter: EOF
  when: nc_container_conf.stat.exists

- name: Ensure Nextcloud container features list is present
  ansible.builtin.lineinfile:
    path: "/etc/pve/lxc/{{ nc_container_id }}.conf"
    regexp: '^features:'
    line: "features: {{ nc_features | dictsort | map('join', '=') | join(';') }}"
    insertafter: EOF
  when: nc_container_conf.stat.exists and nc_features | length > 0

- name: Ensure Nextcloud container DNS servers are set
  ansible.builtin.lineinfile:
    path: "/etc/pve/lxc/{{ nc_container_id }}.conf"
    regexp: '^nameserver:'
    line: "nameserver: {{ nc_dns_servers | join(' ') }}"
    insertafter: EOF
  when: nc_container_conf.stat.exists and nc_dns_servers is defined and nc_dns_servers | length > 0

- name: Read Nextcloud container status
  ansible.builtin.command:
    cmd: pct status {{ nc_container_id }}
  register: nc_status
  changed_when: false
  failed_when: nc_status.rc not in [0, 2]
  when: nc_container_conf.stat.exists

- name: Start Nextcloud container
  ansible.builtin.command:
    cmd: pct start {{ nc_container_id }}
  when:
    - not ansible_check_mode
    - nc_container_conf.stat.exists
    - nc_status.rc is defined
    - (nc_status.rc != 0 or ('stopped' in nc_status.stdout | default('')))

- name: Wait for Nextcloud container to boot
  ansible.builtin.command:
    cmd: pct exec {{ nc_container_id }} -- bash -lc "true"
  register: nc_boot_probe
  failed_when: false
  changed_when: false
  retries: 10
  delay: 3
  until: nc_boot_probe.rc == 0
  when:
    - not ansible_check_mode
    - nc_container_conf.stat.exists

- name: Ensure Nextcloud root password is set
  ansible.builtin.command:
    cmd: >
      pct exec {{ nc_container_id }} -- bash -lc "echo 'root:{{ nc_root_password }}' | chpasswd"
  no_log: true
  when:
    - not ansible_check_mode
    - nc_container_conf.stat.exists
    - nc_root_password is defined
    - nc_root_password | length > 0

- name: Check Nextcloud provisioning marker
  ansible.builtin.command:
    cmd: >
      pct exec {{ nc_container_id }} -- bash -lc "test -f /etc/nextcloud/.provisioned"
  register: nc_provision_marker
  changed_when: false
  failed_when: false
  when: nc_container_conf.stat.exists

- name: Install Nextcloud dependencies
  ansible.builtin.command:
    cmd: >
      pct exec {{ nc_container_id }} -- bash -lc "apt-get update && apt-get install -y {{ (nc_php_modules + nc_extra_packages) | join(' ') }}"
  when:
    - not ansible_check_mode
    - nc_container_conf.stat.exists
    - nc_provision_marker.rc is defined
    - nc_provision_marker.rc != 0

- name: Ensure PHP configuration directory exists
  ansible.builtin.command:
    cmd: >
      pct exec {{ nc_container_id }} -- bash -lc "mkdir -p /etc/php/8.2/fpm/conf.d"
  when: nc_container_conf.stat.exists

- name: Render PHP settings locally
  ansible.builtin.template:
    src: php-nextcloud.ini.j2
    dest: "/tmp/php-nextcloud.{{ nc_container_id }}.ini"

- name: Push PHP settings into container
  ansible.builtin.command:
    cmd: >
      pct push {{ nc_container_id }} /tmp/php-nextcloud.{{ nc_container_id }}.ini /etc/php/8.2/fpm/conf.d/90-nextcloud.ini
  when: nc_container_conf.stat.exists
  notify: restart php-fpm

- name: Remove temporary PHP settings file
  ansible.builtin.file:
    path: "/tmp/php-nextcloud.{{ nc_container_id }}.ini"
    state: absent

- name: Ensure Redis directory exists
  ansible.builtin.command:
    cmd: >
      pct exec {{ nc_container_id }} -- bash -lc "mkdir -p /etc/redis"
  when: nc_container_conf.stat.exists

- name: Render Redis configuration locally
  ansible.builtin.template:
    src: redis.conf.j2
    dest: "/tmp/redis-nextcloud.{{ nc_container_id }}.conf"

- name: Push Redis configuration into container
  ansible.builtin.command:
    cmd: >
      pct push {{ nc_container_id }} /tmp/redis-nextcloud.{{ nc_container_id }}.conf /etc/redis/redis.conf
  when: nc_container_conf.stat.exists
  notify: restart redis

- name: Remove temporary Redis configuration file
  ansible.builtin.file:
    path: "/tmp/redis-nextcloud.{{ nc_container_id }}.conf"
    state: absent

- name: Ensure Nextcloud directories exist
  ansible.builtin.command:
    cmd: >
      pct exec {{ nc_container_id }} -- bash -lc "mkdir -p {{ nc_install_dir }} {{ nc_data_dir }}"
  when: nc_container_conf.stat.exists

- name: Ensure Nextcloud container has Postgres host entry
  ansible.builtin.command:
    cmd: >
      pct exec {{ nc_container_id }} -- bash -lc "grep -q 'postgres.infra.local' /etc/hosts || echo '{{ nc_db_host }} postgres.infra.local' >> /etc/hosts"
  when: not ansible_check_mode and nc_container_conf.stat.exists

- name: Download Nextcloud archive
  ansible.builtin.command:
    cmd: >
      pct exec {{ nc_container_id }} -- bash -lc "if [ ! -f /tmp/nextcloud.tar.bz2 ]; then curl -L {{ nc_archive_url }} -o /tmp/nextcloud.tar.bz2; fi"
  when:
    - not ansible_check_mode
    - nc_container_conf.stat.exists
    - nc_provision_marker.rc is defined
    - nc_provision_marker.rc != 0

- name: Extract Nextcloud archive
  ansible.builtin.command:
    cmd: >
      pct exec {{ nc_container_id }} -- bash -lc "if [ ! -f {{ nc_install_dir }}/version.php ]; then tar -xjf /tmp/nextcloud.tar.bz2 -C /tmp && rm -rf {{ nc_install_dir }} && mv /tmp/nextcloud {{ nc_install_dir }}; fi"
  when:
    - not ansible_check_mode
    - nc_container_conf.stat.exists
    - nc_provision_marker.rc is defined
    - nc_provision_marker.rc != 0

- name: Set permissions on Nextcloud directories
  ansible.builtin.command:
    cmd: >
      pct exec {{ nc_container_id }} -- bash -lc "chown -R {{ nc_web_user }}:{{ nc_web_group }} {{ nc_install_dir }} {{ nc_data_dir }}"
  when: nc_container_conf.stat.exists

- name: Ensure Nginx site directories exist
  ansible.builtin.command:
    cmd: >
      pct exec {{ nc_container_id }} -- bash -lc "mkdir -p /etc/nginx/sites-available /etc/nginx/sites-enabled"
  when: nc_container_conf.stat.exists

- name: Render Nginx site for Nextcloud locally
  ansible.builtin.template:
    src: nginx-nextcloud.conf.j2
    dest: "/tmp/nginx-nextcloud.{{ nc_container_id }}.conf"

- name: Push Nginx site for Nextcloud into container
  ansible.builtin.command:
    cmd: >
      pct push {{ nc_container_id }} /tmp/nginx-nextcloud.{{ nc_container_id }}.conf /etc/nginx/sites-available/nextcloud.conf
  when: nc_container_conf.stat.exists
  notify: reload nginx

- name: Remove temporary Nginx site file
  ansible.builtin.file:
    path: "/tmp/nginx-nextcloud.{{ nc_container_id }}.conf"
    state: absent

- name: Enable Nextcloud Nginx site
  ansible.builtin.command:
    cmd: >
      pct exec {{ nc_container_id }} -- ln -sf /etc/nginx/sites-available/nextcloud.conf /etc/nginx/sites-enabled/nextcloud.conf
  when: not ansible_check_mode and nc_container_conf.stat.exists
  notify: reload nginx

- name: Disable default Nginx site
  ansible.builtin.command:
    cmd: >
      pct exec {{ nc_container_id }} -- bash -lc "[ ! -f /etc/nginx/sites-enabled/default ] || rm /etc/nginx/sites-enabled/default"
  when: not ansible_check_mode and nc_container_conf.stat.exists
  notify: reload nginx

- name: Ensure PHP-FPM service is enabled
  ansible.builtin.command:
    cmd: >
      pct exec {{ nc_container_id }} -- systemctl enable php8.2-fpm
  when: not ansible_check_mode and nc_container_conf.stat.exists

- name: Ensure Redis service is enabled
  ansible.builtin.command:
    cmd: >
      pct exec {{ nc_container_id }} -- systemctl enable redis-server
  when: not ansible_check_mode and nc_container_conf.stat.exists

- name: Ensure Nginx service is enabled
  ansible.builtin.command:
    cmd: >
      pct exec {{ nc_container_id }} -- systemctl enable nginx
  when: not ansible_check_mode and nc_container_conf.stat.exists

- name: Render Nextcloud cron systemd unit locally
  ansible.builtin.template:
    src: nextcloud-cron.service.j2
    dest: "/tmp/nextcloud-cron.service.{{ nc_container_id }}"

- name: Push Nextcloud cron systemd unit into container
  ansible.builtin.command:
    cmd: >
      pct push {{ nc_container_id }} /tmp/nextcloud-cron.service.{{ nc_container_id }} /etc/systemd/system/nextcloud-cron.service
  when: nc_container_conf.stat.exists

- name: Render Nextcloud cron timer locally
  ansible.builtin.template:
    src: nextcloud-cron.timer.j2
    dest: "/tmp/nextcloud-cron.timer.{{ nc_container_id }}"

- name: Push Nextcloud cron timer into container
  ansible.builtin.command:
    cmd: >
      pct push {{ nc_container_id }} /tmp/nextcloud-cron.timer.{{ nc_container_id }} /etc/systemd/system/nextcloud-cron.timer
  when: nc_container_conf.stat.exists

- name: Remove temporary Nextcloud cron unit file
  ansible.builtin.file:
    path: "/tmp/nextcloud-cron.service.{{ nc_container_id }}"
    state: absent

- name: Remove temporary Nextcloud cron timer file
  ansible.builtin.file:
    path: "/tmp/nextcloud-cron.timer.{{ nc_container_id }}"
    state: absent

- name: Enable Nextcloud cron timer
  ansible.builtin.command:
    cmd: >
      pct exec {{ nc_container_id }} -- systemctl enable --now nextcloud-cron.timer
  when: not ansible_check_mode and nc_container_conf.stat.exists

- name: Run Nextcloud installation (occ)
  ansible.builtin.command:
    cmd: >
      pct exec {{ nc_container_id }} -- bash -lc "su -s /bin/sh {{ nc_web_user }} -c 'php {{ nc_install_dir }}/occ maintenance:install --database {{ nc_db_type }} --database-host {{ nc_db_host }} --database-name {{ nc_db_name }} --database-user {{ nc_db_user }} --database-pass "'"'{{ nc_db_password }}'"'" --admin-user {{ nc_admin_user }} --admin-pass "'"'{{ nc_admin_password }}'"'" --data-dir {{ nc_data_dir }}'"
  no_log: false
  when:
    - not ansible_check_mode
    - nc_container_conf.stat.exists
    - nc_provision_marker.rc is defined
    - nc_provision_marker.rc != 0

- name: Configure trusted domains and caching
  ansible.builtin.command:
    cmd: >
      pct exec {{ nc_container_id }} -- bash -lc "sudo -u {{ nc_web_user }} php {{ nc_install_dir }}/occ config:system:set trusted_domains {{ loop.index0 }} --value='{{ item }}'"
  loop: "{{ nc_trusted_domains }}"
  when: not ansible_check_mode and nc_container_conf.stat.exists

- name: Configure Redis cache
  ansible.builtin.command:
    cmd: >
      pct exec {{ nc_container_id }} -- bash -lc "sudo -u {{ nc_web_user }} php {{ nc_install_dir }}/occ config:system:set memcache.local --value '\\OC\\Memcache\\APCu'"
  when: not ansible_check_mode and nc_container_conf.stat.exists

- name: Configure Redis distributed cache
  ansible.builtin.command:
    cmd: >
      pct exec {{ nc_container_id }} -- bash -lc "sudo -u {{ nc_web_user }} php {{ nc_install_dir }}/occ config:system:set memcache.distributed --value '\\OC\\Memcache\\Redis'"
  when: not ansible_check_mode and nc_container_conf.stat.exists

- name: Configure Redis connection settings
  ansible.builtin.command:
    cmd: >
      pct exec {{ nc_container_id }} -- bash -lc "sudo -u {{ nc_web_user }} php {{ nc_install_dir }}/occ config:system:set redis host --value '{{ nc_redis_host }}'"
  when: not ansible_check_mode and nc_container_conf.stat.exists

- name: Configure Redis port
  ansible.builtin.command:
    cmd: >
      pct exec {{ nc_container_id }} -- bash -lc "sudo -u {{ nc_web_user }} php {{ nc_install_dir }}/occ config:system:set redis port --value '{{ nc_redis_port }}'"
  when: not ansible_check_mode and nc_container_conf.stat.exists

- name: Set overwrite protocol
  ansible.builtin.command:
    cmd: >
      pct exec {{ nc_container_id }} -- bash -lc "sudo -u {{ nc_web_user }} php {{ nc_install_dir }}/occ config:system:set overwriteprotocol --value '{{ nc_overwrite_protocol }}'"
  when: not ansible_check_mode and nc_container_conf.stat.exists and nc_overwrite_protocol is defined

- name: Ensure Nextcloud LDAP app is enabled
  ansible.builtin.command:
    cmd: >
      pct exec {{ nc_container_id }} -- bash -lc "sudo -u {{ nc_web_user }} php {{ nc_install_dir }}/occ app:enable user_ldap"
  register: nc_ldap_app_enable
  changed_when: "'enabled' in (nc_ldap_app_enable.stdout | default(''))"
  failed_when: nc_ldap_app_enable.rc not in [0, 1]
  when:
    - not ansible_check_mode
    - nc_container_conf.stat.exists
    - nc_enable_ldap

- name: Fetch Nextcloud LDAP configurations
  ansible.builtin.command:
    cmd: >
      pct exec {{ nc_container_id }} -- bash -lc "sudo -u {{ nc_web_user }} php {{ nc_install_dir }}/occ ldap:show-config --output=json"
  register: nc_ldap_config_show
  changed_when: false
  failed_when: false
  when:
    - not ansible_check_mode
    - nc_container_conf.stat.exists
    - nc_enable_ldap

- name: Parse Nextcloud LDAP configurations
  ansible.builtin.set_fact:
    nc_ldap_configurations: "{{ nc_ldap_config_show.stdout | default('{}') | from_json }}"
  when:
    - not ansible_check_mode
    - nc_container_conf.stat.exists
    - nc_enable_ldap
    - nc_ldap_config_show.rc == 0
    - nc_ldap_config_show.stdout | length > 0
  no_log: true

- name: Initialize empty LDAP configuration map when parsing failed
  ansible.builtin.set_fact:
    nc_ldap_configurations: {}
  when:
    - not ansible_check_mode
    - nc_container_conf.stat.exists
    - nc_enable_ldap
    - nc_ldap_configurations is not defined

- name: Determine Nextcloud LDAP configuration identifier
  ansible.builtin.set_fact:
    nc_ldap_config_id_effective: >-
      {{ nc_ldap_config_id if (nc_ldap_configurations.get(nc_ldap_config_id) is defined)
         else (nc_ldap_configurations.keys() | list | first | default(nc_ldap_config_id)) }}
  when:
    - not ansible_check_mode
    - nc_container_conf.stat.exists
    - nc_enable_ldap

- name: Create Nextcloud LDAP configuration when none exist
  ansible.builtin.command:
    cmd: >
      pct exec {{ nc_container_id }} -- bash -lc "sudo -u {{ nc_web_user }} php {{ nc_install_dir }}/occ ldap:create-empty-config"
  register: nc_ldap_create_config
  changed_when: "'Configuration created' in (nc_ldap_create_config.stdout | default(''))"
  failed_when: nc_ldap_create_config.rc != 0
  when:
    - not ansible_check_mode
    - nc_container_conf.stat.exists
    - nc_enable_ldap
    - (nc_ldap_configurations | default({}) | length) == 0

- name: Capture created Nextcloud LDAP configuration identifier
  ansible.builtin.set_fact:
    nc_ldap_config_id_effective: "{{ (nc_ldap_create_config.stdout | regex_search('Configuration created with name: (s\\d+)', '\\1')) | default(nc_ldap_config_id) }}"
  when:
    - not ansible_check_mode
    - nc_container_conf.stat.exists
    - nc_enable_ldap
    - nc_ldap_create_config is defined
    - nc_ldap_create_config.stdout is defined

- name: Ensure LDAP configuration identifier fact is set
  ansible.builtin.set_fact:
    nc_ldap_config_id_effective: "{{ nc_ldap_config_id_effective | default(nc_ldap_config_id) }}"
  when:
    - nc_enable_ldap

- name: Select current Nextcloud LDAP configuration snapshot
  ansible.builtin.set_fact:
    nc_ldap_current_config: "{{ (nc_ldap_configurations | default({})).get(nc_ldap_config_id_effective, {}) }}"
  when:
    - nc_enable_ldap
  no_log: true

- name: Apply Nextcloud LDAP connection settings
  ansible.builtin.command:
    cmd: >
      pct exec {{ nc_container_id }} -- bash -lc "sudo -u {{ nc_web_user }} php {{ nc_install_dir }}/occ ldap:set-config {{ nc_ldap_config_id_effective }} {{ item.key }} {{ item.value | quote }}"
  loop: "{{ nc_ldap_config }}"
  register: nc_ldap_set_config
  changed_when: "'Configuration saved' in (nc_ldap_set_config.stdout | default(''))"
  failed_when: nc_ldap_set_config.rc != 0
  when:
    - not ansible_check_mode
    - nc_container_conf.stat.exists
    - nc_enable_ldap
    - nc_ldap_current_config.get(item.key) | default('') != (item.value | string)
  loop_control:
    label: "{{ item.key }}"
  no_log: true

- name: Validate Nextcloud LDAP configuration
  ansible.builtin.command:
    cmd: >
      pct exec {{ nc_container_id }} -- bash -lc "sudo -u {{ nc_web_user }} php {{ nc_install_dir }}/occ ldap:test-config {{ nc_ldap_config_id_effective }}"
  register: nc_ldap_test_config
  changed_when: false
  failed_when: nc_ldap_test_config.rc != 0 or ('The configuration is valid' not in (nc_ldap_test_config.stdout | default('')))
  when:
    - not ansible_check_mode
    - nc_container_conf.stat.exists
    - nc_enable_ldap
  no_log: true

- name: Touch Nextcloud provisioning marker
  ansible.builtin.command:
    cmd: >
      pct exec {{ nc_container_id }} -- bash -lc "mkdir -p /etc/nextcloud && touch /etc/nextcloud/.provisioned"
  when:
    - not ansible_check_mode
    - nc_container_conf.stat.exists
    - nc_provision_marker.rc is defined
    - nc_provision_marker.rc != 0
