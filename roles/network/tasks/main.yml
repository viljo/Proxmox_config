---
- name: Install networking packages
  ansible.builtin.apt:
    name: "{{ network_packages }}"
    state: present
    update_cache: "{{ network_update_cache }}"
  when: network_packages | length > 0

- name: Ensure interfaces directory exists
  ansible.builtin.file:
    path: "{{ network_interfaces_path }}"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Deploy network interface definitions
  ansible.builtin.template:
    src: interface.j2
    dest: "{{ network_interfaces_path }}/{{ item.filename | default(item.name + '.cfg') }}"
    owner: root
    group: root
    mode: "0644"
  loop: "{{ network_interfaces }}"
  loop_control:
    label: "{{ item.name }}"
  when: item.name is defined
  notify: reload networking

- name: Remove legacy interface files without extension
  ansible.builtin.file:
    path: "{{ network_interfaces_path }}/{{ item.name }}"
    state: absent
  loop: "{{ network_interfaces }}"
  loop_control:
    label: "{{ item.name }}"
  when: item.name is defined

- name: Configure resolver with fallback nameservers
  ansible.builtin.template:
    src: resolv.conf.j2
    dest: "{{ network_resolvconf_path }}"
    owner: root
    group: root
    mode: "0644"
  when:
    - network_manage_resolvconf
    - network_resolvconf_nameservers | length > 0

- name: Ensure primary interfaces file sources interfaces.d
  ansible.builtin.lineinfile:
    path: /etc/network/interfaces
    regexp: '^source /etc/network/interfaces.d/'
    line: 'source /etc/network/interfaces.d/*'
    create: true
    owner: root
    group: root
    mode: "0644"

- name: Remove legacy vmbr1 definition from primary interfaces file
  ansible.builtin.replace:
    path: /etc/network/interfaces
    regexp: '(?ms)^auto vmbr1\niface vmbr1[^\n]*(\n[^\n]*)*\n'
    replace: ''

- name: Remove legacy vmbr0 definition from primary interfaces file
  ansible.builtin.replace:
    path: /etc/network/interfaces
    regexp: '(?ms)^auto vmbr0\niface vmbr0[^\n]*(\n[^\n]*)*\n'
    replace: ''

- name: Extract WAN bridge definition
  ansible.builtin.set_fact:
    network_wan_definition: "{{ (network_interfaces | selectattr('name', 'equalto', wan_bridge) | list | first) if (wan_bridge is defined) else {} }}"

- name: Ensure WAN bridge is defined in primary interfaces file
  ansible.builtin.blockinfile:
    path: /etc/network/interfaces
    marker: "# {mark} ANSIBLE MANAGED WAN"
    block: |
      auto {{ wan_bridge }}
      iface {{ wan_bridge }} inet {{ network_wan_definition.method | default('dhcp') }}
      {% for option in network_wan_definition.options | default([]) %}
        {{ option }}
      {% endfor %}
  when: network_wan_definition is defined and (network_wan_definition | length > 0)
