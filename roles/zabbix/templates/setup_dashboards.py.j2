#!/usr/bin/env python3
"""
Zabbix Dashboard Configuration Script
Managed by Ansible - Provisions custom infrastructure dashboards
"""

import json
import requests
import sys
from typing import Dict, Any, List

# Configuration
ZABBIX_URL = "http://localhost/api_jsonrpc.php"
ZABBIX_USER = "Admin"
ZABBIX_PASSWORD = "{{ zabbix_admin_password }}"

class ZabbixAPI:
    def __init__(self, url: str, username: str, password: str):
        self.url = url
        self.username = username
        self.password = password
        self.auth_token = None
        self.request_id = 0

    def _request(self, method: str, params: Dict[str, Any]) -> Any:
        """Make a JSON-RPC request to Zabbix API"""
        self.request_id += 1
        payload = {
            "jsonrpc": "2.0",
            "method": method,
            "params": params,
            "id": self.request_id
        }

        if self.auth_token and method != "user.login":
            payload["auth"] = self.auth_token

        try:
            response = requests.post(self.url, json=payload, timeout=30)
            response.raise_for_status()
            result = response.json()

            if "error" in result:
                raise Exception(f"API Error: {result['error']}")

            return result.get("result")
        except Exception as e:
            print(f"Request failed: {e}", file=sys.stderr)
            raise

    def login(self):
        """Authenticate with Zabbix"""
        self.auth_token = self._request("user.login", {
            "username": self.username,
            "password": self.password
        })
        print(f"Authenticated successfully")

    def logout(self):
        """Logout from Zabbix"""
        if self.auth_token:
            self._request("user.logout", [])

    def get_hosts(self) -> List[Dict]:
        """Get all monitored hosts"""
        return self._request("host.get", {
            "output": ["hostid", "host", "name", "status"],
            "selectInterfaces": ["ip"],
            "selectGroups": ["name"]
        })

    def get_host_group(self, name: str) -> Dict:
        """Get or create host group"""
        groups = self._request("hostgroup.get", {
            "output": "extend",
            "filter": {"name": name}
        })

        if groups:
            return groups[0]

        # Create group if it doesn't exist
        result = self._request("hostgroup.create", {"name": name})
        return {"groupid": result["groupids"][0], "name": name}

    def create_host(self, hostname: str, visible_name: str, ip: str, group_id: str, templates: List[str] = None) -> Dict:
        """Create a new monitored host"""
        # Check if host already exists
        existing = self._request("host.get", {
            "output": ["hostid"],
            "filter": {"host": hostname}
        })

        if existing:
            print(f"Host '{visible_name}' already exists")
            return existing[0]

        host_data = {
            "host": hostname,
            "name": visible_name,
            "interfaces": [{
                "type": 1,  # Agent
                "main": 1,
                "useip": 1,
                "ip": ip,
                "dns": "",
                "port": "{{ zabbix_agent_port }}"
            }],
            "groups": [{"groupid": group_id}]
        }

        if templates:
            template_ids = []
            for template_name in templates:
                tmpl = self._request("template.get", {
                    "output": ["templateid"],
                    "filter": {"host": template_name}
                })
                if tmpl:
                    template_ids.append({"templateid": tmpl[0]["templateid"]})

            if template_ids:
                host_data["templates"] = template_ids

        result = self._request("host.create", host_data)
        print(f"Created host: {visible_name} ({ip})")
        return {"hostid": result["hostids"][0]}

    def get_dashboard(self, name: str) -> Dict:
        """Get dashboard by name"""
        dashboards = self._request("dashboard.get", {
            "output": "extend",
            "filter": {"name": name}
        })
        return dashboards[0] if dashboards else None

    def create_infrastructure_dashboard(self):
        """Create comprehensive infrastructure overview dashboard"""
        dashboard_name = "Proxmox Infrastructure Overview"

        # Check if dashboard already exists
        existing = self.get_dashboard(dashboard_name)
        if existing:
            print(f"Dashboard '{dashboard_name}' already exists (ID: {existing['dashboardid']})")
            return

        # Get all hosts for widgets
        hosts = self.get_hosts()

        # Dashboard configuration with multiple widgets
        dashboard_config = {
            "name": dashboard_name,
            "display_period": 30,
            "auto_start": 1,
            "pages": [{
                "name": "Main",
                "display_period": 0,
                "widgets": [
                    # Overall infrastructure status
                    {
                        "type": "problemsbysv",
                        "name": "Infrastructure Problems",
                        "x": 0,
                        "y": 0,
                        "width": 12,
                        "height": 5,
                        "fields": [
                            {"type": 0, "name": "show_suppressed", "value": 0},
                            {"type": 0, "name": "show_timeline", "value": 1}
                        ]
                    },
                    # Container health grid
                    {
                        "type": "problemhosts",
                        "name": "Container Status",
                        "x": 12,
                        "y": 0,
                        "width": 12,
                        "height": 5,
                        "fields": [
                            {"type": 0, "name": "show_suppressed", "value": 0},
                            {"type": 0, "name": "exclude_groupids", "value": ""}
                        ]
                    },
                    # System performance graph
                    {
                        "type": "graph",
                        "name": "Infrastructure Resource Usage",
                        "x": 0,
                        "y": 5,
                        "width": 12,
                        "height": 5,
                        "fields": []
                    },
                    # Top triggers
                    {
                        "type": "toptriggers",
                        "name": "Top 10 Issues",
                        "x": 12,
                        "y": 5,
                        "width": 12,
                        "height": 5,
                        "fields": []
                    },
                    # Host availability
                    {
                        "type": "hostavail",
                        "name": "Container Availability",
                        "x": 0,
                        "y": 10,
                        "width": 12,
                        "height": 4,
                        "fields": [
                            {"type": 0, "name": "interface_type", "value": 1}
                        ]
                    },
                    # Data overview
                    {
                        "type": "dataover",
                        "name": "Services Overview",
                        "x": 12,
                        "y": 10,
                        "width": 12,
                        "height": 4,
                        "fields": []
                    }
                ]
            }]
        }

        result = self._request("dashboard.create", dashboard_config)
        print(f"Dashboard created successfully! Dashboard ID: {result['dashboardids'][0]}")
        print(f"Access it at: http://{{ zabbix_external_domain }}/zabbix.php?action=dashboard.view&dashboardid={result['dashboardids'][0]}")

def main():
    """Main execution function"""
    api = ZabbixAPI(ZABBIX_URL, ZABBIX_USER, ZABBIX_PASSWORD)

    try:
        # Authenticate
        api.login()

        # Create host group for infrastructure
        group = api.get_host_group("Proxmox Infrastructure")
        print(f"Using host group: {group['name']} (ID: {group['groupid']})")

        # Define infrastructure hosts
        infrastructure_hosts = [
{% for container in zabbix_monitored_containers %}
            {
                "hostname": "{{ container.name | lower | replace(' ', '-') }}",
                "visible_name": "{{ container.name }}",
                "ip": "{{ container.ip }}",
                "templates": {{ container.templates | to_json }}
            },
{% endfor %}
        ]

        # Create/verify all hosts
        for host_config in infrastructure_hosts:
            api.create_host(
                hostname=host_config["hostname"],
                visible_name=host_config["visible_name"],
                ip=host_config["ip"],
                group_id=group["groupid"],
                templates=host_config.get("templates", [])
            )

        # Create infrastructure dashboard
        api.create_infrastructure_dashboard()

        print("\n" + "="*60)
        print("Zabbix configuration completed successfully!")
        print("="*60)
        print(f"Dashboard URL: http://{{ zabbix_external_domain }}/")
        print(f"Username: Admin")
        print(f"Default Password: zabbix")
        print("\nIMPORTANT: Change the admin password after first login!")

    except Exception as e:
        print(f"Configuration failed: {e}", file=sys.stderr)
        sys.exit(1)
    finally:
        api.logout()

if __name__ == "__main__":
    main()
