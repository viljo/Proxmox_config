---
- name: Ensure demo site template cache directory exists
  ansible.builtin.file:
    path: "{{ demo_site_template_file | dirname }}"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Download template for demo site container
  ansible.builtin.get_url:
    url: "{{ demo_site_template_url }}"
    dest: "{{ demo_site_template_file }}"
    mode: "0644"
    force: false
  when: not ansible_check_mode

- name: Compose demo site container network configuration
  ansible.builtin.set_fact:
    demo_site_net0: "{{ [
      'name=eth0',
      'bridge=' ~ demo_site_bridge,
      'ip=' ~ demo_site_ip_config,
      ('tag=' ~ demo_site_vlan_tag) if (demo_site_vlan_tag | default('')) else None,
      ('gw=' ~ demo_site_gateway) if (demo_site_gateway | default('')) else None
    ] | select('string') | join(',') }}"

- name: Ensure demo site container exists
  ansible.builtin.shell: |
    pct create {{ demo_site_container_id }} {{ demo_site_template_file }} \
      --hostname {{ demo_site_hostname }} \
      --cores {{ demo_site_cores }} \
      --memory {{ demo_site_memory }} \
      --swap {{ demo_site_swap }} \
      --rootfs {{ demo_site_rootfs_storage }}:{{ demo_site_disk }} \
      --net0 {{ demo_site_net0 }} \
      {% if demo_site_unprivileged %}--unprivileged 1{% endif %}
  args:
    creates: "/etc/pve/lxc/{{ demo_site_container_id }}.conf"
  when: not ansible_check_mode

- name: Stat demo site container configuration
  ansible.builtin.stat:
    path: "/etc/pve/lxc/{{ demo_site_container_id }}.conf"
  register: demo_site_container_conf

- name: Ensure demo site container network configuration
  ansible.builtin.lineinfile:
    path: "/etc/pve/lxc/{{ demo_site_container_id }}.conf"
    regexp: '^net0:'
    line: "net0: {{ demo_site_net0 }}"
    insertafter: EOF
  when: demo_site_container_conf.stat.exists

- name: Ensure demo site container onboot flag is set
  ansible.builtin.lineinfile:
    path: "/etc/pve/lxc/{{ demo_site_container_id }}.conf"
    regexp: '^onboot:'
    line: "onboot: {{ 1 if demo_site_start_onboot else 0 }}"
    insertafter: EOF
  when: demo_site_container_conf.stat.exists

- name: Ensure demo site container features list is present
  ansible.builtin.lineinfile:
    path: "/etc/pve/lxc/{{ demo_site_container_id }}.conf"
    regexp: '^features:'
    line: "features: {{ demo_site_features | dictsort | map('join', '=') | join(';') }}"
    insertafter: EOF
  when: demo_site_container_conf.stat.exists and demo_site_features | length > 0

- name: Ensure demo site container DNS servers are set
  ansible.builtin.lineinfile:
    path: "/etc/pve/lxc/{{ demo_site_container_id }}.conf"
    regexp: '^nameserver:'
    line: "nameserver: {{ demo_site_dns_servers | join(' ') }}"
    insertafter: EOF
  when: demo_site_container_conf.stat.exists and demo_site_dns_servers is defined and demo_site_dns_servers | length > 0

- name: Read demo site container status
  ansible.builtin.command:
    cmd: pct status {{ demo_site_container_id }}
  register: demo_site_status
  changed_when: false
  failed_when: demo_site_status.rc not in [0, 2]
  when: demo_site_container_conf.stat.exists

- name: Start demo site container
  ansible.builtin.command:
    cmd: pct start {{ demo_site_container_id }}
  changed_when: >-
    demo_site_status.rc is defined and
    (demo_site_status.rc != 0 or ('stopped' in (demo_site_status.stdout | default(''))))
  when:
    - not ansible_check_mode
    - demo_site_container_conf.stat.exists
    - demo_site_status.rc is defined
    - (demo_site_status.rc != 0 or ('stopped' in demo_site_status.stdout | default('')))

- name: Wait for demo site container to boot
  ansible.builtin.command:
    cmd: pct exec {{ demo_site_container_id }} -- bash -lc "true"
  register: demo_site_boot_probe
  failed_when: false
  changed_when: false
  retries: 10
  delay: 3
  until: demo_site_boot_probe.rc == 0
  when:
    - not ansible_check_mode
    - demo_site_container_conf.stat.exists

- name: Check demo site provisioning marker
  ansible.builtin.command:
    cmd: >
      pct exec {{ demo_site_container_id }} -- bash -lc "test -f /etc/demo-site/.provisioned"
  register: demo_site_provision_marker
  changed_when: false
  failed_when: false
  when: demo_site_container_conf.stat.exists

- name: Ensure demo site root password is set
  ansible.builtin.command:
    cmd: >
      pct exec {{ demo_site_container_id }} -- bash -lc "echo 'root:{{ demo_site_root_password }}' | chpasswd"
  register: demo_site_root_password_set
  changed_when: demo_site_root_password_set.rc == 0
  no_log: true
  when:
    - not ansible_check_mode
    - demo_site_container_conf.stat.exists
    - demo_site_root_password is defined
    - demo_site_root_password | length > 0
    - demo_site_provision_marker.rc is defined
    - demo_site_provision_marker.rc != 0

- name: Install nginx for demo site
  ansible.builtin.command:
    cmd: >
      pct exec {{ demo_site_container_id }} -- bash -lc "apt-get update && apt-get install -y nginx"
  register: demo_site_nginx_install
  changed_when: >-
    'already the newest version' not in ((demo_site_nginx_install.stdout | default('')) +
    (demo_site_nginx_install.stderr | default('')))
  when:
    - not ansible_check_mode
    - demo_site_container_conf.stat.exists
    - demo_site_provision_marker.rc is defined
    - demo_site_provision_marker.rc != 0

- name: Render demo site pages locally
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "/tmp/demo-site-{{ item.dest }}.{{ demo_site_container_id }}"
    mode: "0644"
  loop:
    - { src: "index.html.j2", dest: "index.html" }
    - { src: "hello.html.j2", dest: "hello.html" }
  loop_control:
    label: "{{ item.dest }}"
  when: demo_site_container_conf.stat.exists

- name: Push demo site pages into container
  ansible.builtin.command:
    cmd: >
      pct push {{ demo_site_container_id }} /tmp/demo-site-{{ item.dest }}.{{ demo_site_container_id }} {{ demo_site_web_root }}/{{ item.dest }}
  loop:
    - { src: "index.html.j2", dest: "index.html" }
    - { src: "hello.html.j2", dest: "hello.html" }
  loop_control:
    label: "{{ item.dest }}"
  changed_when: true
  when: demo_site_container_conf.stat.exists
  notify: Restart demo site nginx

- name: Set ownership on demo site content
  ansible.builtin.command:
    cmd: >
      pct exec {{ demo_site_container_id }} -- bash -lc "chown -R {{ demo_site_web_user }}:{{ demo_site_web_group }} {{ demo_site_web_root }}"
  changed_when: true
  when: demo_site_container_conf.stat.exists

- name: Remove temporary demo site pages
  ansible.builtin.file:
    path: "/tmp/demo-site-{{ item.dest }}.{{ demo_site_container_id }}"
    state: absent
  loop:
    - { src: "index.html.j2", dest: "index.html" }
    - { src: "hello.html.j2", dest: "hello.html" }
  loop_control:
    label: "{{ item.dest }}"

- name: Enable nginx service inside demo site container
  ansible.builtin.command:
    cmd: >
      pct exec {{ demo_site_container_id }} -- systemctl enable nginx
  register: demo_site_nginx_enable
  changed_when: >-
    (demo_site_nginx_enable.stdout | default('')) is search('Created symlink') or
    (demo_site_nginx_enable.stderr | default('')) is search('Created symlink')
  when: not ansible_check_mode and demo_site_container_conf.stat.exists

- name: Ensure nginx service is running inside demo site container
  ansible.builtin.command:
    cmd: >
      pct exec {{ demo_site_container_id }} -- systemctl start nginx
  changed_when: false
  when: not ansible_check_mode and demo_site_container_conf.stat.exists

- name: Touch demo site provisioning marker
  ansible.builtin.command:
    cmd: >
      pct exec {{ demo_site_container_id }} -- bash -lc "mkdir -p /etc/demo-site && touch /etc/demo-site/.provisioned"
  changed_when: true
  when:
    - not ansible_check_mode
    - demo_site_container_conf.stat.exists
    - demo_site_provision_marker.rc is defined
    - demo_site_provision_marker.rc != 0
