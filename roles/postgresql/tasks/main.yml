---
- name: Ensure PostgreSQL template cache directory exists
  ansible.builtin.file:
    path: "{{ postgres_template_file | dirname }}"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Download Debian template for PostgreSQL container
  ansible.builtin.get_url:
    url: "{{ postgres_template_url }}"
    dest: "{{ postgres_template_file }}"
    mode: "0644"
    force: false
  when: not ansible_check_mode

- name: Compose PostgreSQL container network configuration
  ansible.builtin.set_fact:
    postgres_net0: >-
      name=eth0,bridge={{ postgres_bridge }}{% if postgres_vlan_tag %},tag={{ postgres_vlan_tag }}{% endif %},ip={{ postgres_ip_config }}{% if postgres_gateway is defined and postgres_gateway %},gw={{ postgres_gateway }}{% endif %}

- name: Ensure PostgreSQL container exists
  ansible.builtin.shell: |
    pct create {{ postgres_container_id }} {{ postgres_template_file }} \
      --hostname {{ postgres_hostname }} \
      --cores {{ postgres_cores }} \
      --memory {{ postgres_memory }} \
      --swap {{ postgres_swap }} \
      --rootfs {{ postgres_rootfs_storage }}:{{ postgres_disk }} \
      --net0 {{ postgres_net0 }} \
      {% if postgres_unprivileged %}--unprivileged 1{% endif %}
  args:
    creates: "/etc/pve/lxc/{{ postgres_container_id }}.conf"
  when: not ansible_check_mode

- name: Stat PostgreSQL container configuration
  ansible.builtin.stat:
    path: "/etc/pve/lxc/{{ postgres_container_id }}.conf"
  register: postgres_container_conf

- name: Ensure PostgreSQL container network configuration
  ansible.builtin.command:
    cmd: >
      pct set {{ postgres_container_id }} --net0 {{ postgres_net0 }}
  when: not ansible_check_mode and postgres_container_conf.stat.exists

- name: Ensure PostgreSQL container onboot flag is set
  ansible.builtin.lineinfile:
    path: "/etc/pve/lxc/{{ postgres_container_id }}.conf"
    regexp: '^onboot:'
    line: "onboot: {{ 1 if postgres_start_onboot else 0 }}"
    insertafter: EOF
  when: postgres_container_conf.stat.exists

- name: Ensure PostgreSQL container features list is present
  ansible.builtin.lineinfile:
    path: "/etc/pve/lxc/{{ postgres_container_id }}.conf"
    regexp: '^features:'
    line: "features: {{ postgres_features | dictsort | map('join', '=') | join(';') }}"
    insertafter: EOF
  when: postgres_container_conf.stat.exists and postgres_features | length > 0

- name: Ensure PostgreSQL container DNS servers are set
  ansible.builtin.lineinfile:
    path: "/etc/pve/lxc/{{ postgres_container_id }}.conf"
    regexp: '^nameserver:'
    line: "nameserver: {{ postgres_dns_servers | join(' ') }}"
    insertafter: EOF
  when: postgres_container_conf.stat.exists and postgres_dns_servers is defined and postgres_dns_servers | length > 0

- name: Read PostgreSQL container status
  ansible.builtin.command:
    cmd: pct status {{ postgres_container_id }}
  register: postgres_status
  changed_when: false
  failed_when: postgres_status.rc not in [0, 2]
  when: postgres_container_conf.stat.exists

- name: Start PostgreSQL container
  ansible.builtin.command:
    cmd: pct start {{ postgres_container_id }}
  when:
    - not ansible_check_mode
    - postgres_container_conf.stat.exists
    - postgres_status.rc is defined
    - (postgres_status.rc != 0 or ('stopped' in postgres_status.stdout | default('')))

- name: Wait for PostgreSQL container to boot
  ansible.builtin.command:
    cmd: pct exec {{ postgres_container_id }} -- bash -lc "true"
  register: postgres_boot_probe
  failed_when: false
  changed_when: false
  retries: 10
  delay: 3
  until: postgres_boot_probe.rc == 0
  when:
    - not ansible_check_mode
    - postgres_container_conf.stat.exists

- name: Ensure PostgreSQL root password is set
  ansible.builtin.command:
    cmd: >
      pct exec {{ postgres_container_id }} -- bash -lc "echo 'root:{{ postgres_root_password }}' | chpasswd"
  no_log: true
  when:
    - not ansible_check_mode
    - postgres_container_conf.stat.exists
    - postgres_root_password is defined
    - postgres_root_password | length > 0

- name: Check PostgreSQL provisioning marker
  ansible.builtin.command:
    cmd: >
      pct exec {{ postgres_container_id }} -- bash -lc "test -f /etc/postgresql/.provisioned"
  register: postgres_provision_marker
  changed_when: false
  failed_when: false
  when: postgres_container_conf.stat.exists

- name: Install PostgreSQL packages
  ansible.builtin.command:
    cmd: >
      pct exec {{ postgres_container_id }} -- bash -lc "apt-get update && apt-get install -y postgresql-{{ postgres_version }} postgresql-contrib {{ postgres_extra_packages | join(' ') }}"
  when:
    - not ansible_check_mode
    - postgres_container_conf.stat.exists
    - postgres_provision_marker.rc is defined
    - postgres_provision_marker.rc != 0

- name: Ensure PostgreSQL config directory exists on host
  ansible.builtin.file:
    path: "{{ postgres_rootfs_path }}/etc/postgresql/{{ postgres_version }}/main"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Template postgresql.conf
  ansible.builtin.template:
    src: postgresql.conf.j2
    dest: "{{ postgres_rootfs_path }}/etc/postgresql/{{ postgres_version }}/main/postgresql.conf"
    owner: root
    group: root
    mode: "0644"
  when: postgres_container_conf.stat.exists
  notify: restart postgresql

- name: Template pg_hba.conf
  ansible.builtin.template:
    src: pg_hba.conf.j2
    dest: "{{ postgres_rootfs_path }}/etc/postgresql/{{ postgres_version }}/main/pg_hba.conf"
    owner: root
    group: root
    mode: "0640"
  when: postgres_container_conf.stat.exists
  notify: restart postgresql

- name: Ensure PostgreSQL service is enabled
  ansible.builtin.command:
    cmd: >
      pct exec {{ postgres_container_id }} -- systemctl enable postgresql
  when:
    - not ansible_check_mode
    - postgres_container_conf.stat.exists

- name: Ensure PostgreSQL service is running
  ansible.builtin.command:
    cmd: >
      pct exec {{ postgres_container_id }} -- systemctl start postgresql
  when:
    - not ansible_check_mode
    - postgres_container_conf.stat.exists

- name: Ensure PostgreSQL users are present
  ansible.builtin.command:
    cmd: >
      pct exec {{ postgres_container_id }} -- bash -lc "sudo -u postgres psql -tAc \"SELECT 1 FROM pg_roles WHERE rolname='{{ item.name }}'\""
  register: postgres_user_check
  changed_when: false
  failed_when: false
  loop: "{{ postgres_users }}"
  when:
    - postgres_container_conf.stat.exists
    - postgres_users | length > 0

- name: Create PostgreSQL users
  ansible.builtin.command:
    cmd: >
      pct exec {{ postgres_container_id }} -- bash -lc "sudo -u postgres psql -c \"CREATE ROLE {{ item.name | quote }} WITH LOGIN PASSWORD '{{ item.password }}'{% if item.role_attrs is defined and item.role_attrs %} {{ item.role_attrs }}{% endif %};\""
  loop: "{{ postgres_users }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - not ansible_check_mode
    - postgres_container_conf.stat.exists
    - postgres_users | length > 0
    - (postgres_user_check.results is defined)
    - (postgres_user_check.results[loop.index0].rc != 0)

- name: Ensure PostgreSQL databases exist
  ansible.builtin.command:
    cmd: >
      pct exec {{ postgres_container_id }} -- bash -lc "sudo -u postgres psql -tAc \"SELECT 1 FROM pg_database WHERE datname='{{ item.name }}'\""
  register: postgres_db_check
  changed_when: false
  failed_when: false
  loop: "{{ postgres_databases }}"
  when:
    - postgres_container_conf.stat.exists
    - postgres_databases | length > 0

- name: Create PostgreSQL databases
  ansible.builtin.command:
    cmd: >
      pct exec {{ postgres_container_id }} -- bash -lc "sudo -u postgres createdb -O {{ item.owner | default('postgres') }} {{ item.name }}"
  loop: "{{ postgres_databases }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - not ansible_check_mode
    - postgres_container_conf.stat.exists
    - postgres_databases | length > 0
    - (postgres_db_check.results is defined)
    - (postgres_db_check.results[loop.index0].rc != 0)

- name: Touch PostgreSQL provisioning marker
  ansible.builtin.command:
    cmd: >
      pct exec {{ postgres_container_id }} -- bash -lc "mkdir -p /etc/postgresql && touch /etc/postgresql/.provisioned"
  when:
    - not ansible_check_mode
    - postgres_container_conf.stat.exists
    - postgres_provision_marker.rc is defined
    - postgres_provision_marker.rc != 0
