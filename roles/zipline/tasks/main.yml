---
- name: Ensure Zipline template cache directory exists
  ansible.builtin.file:
    path: "{{ zipline_template_file | dirname }}"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Download template for Zipline container
  ansible.builtin.get_url:
    url: "{{ zipline_template_url }}"
    dest: "{{ zipline_template_file }}"
    mode: "0644"
    force: false
  when: not ansible_check_mode

- name: Compose Zipline container network configuration
  ansible.builtin.set_fact:
    zipline_net0: >-
      name=eth0,bridge={{ zipline_bridge }}{% if zipline_vlan_tag %},tag={{ zipline_vlan_tag }}{% endif %},ip={{ zipline_ip_config }}{% if zipline_gateway is defined and zipline_gateway %},gw={{ zipline_gateway }}{% endif %}

- name: Ensure Zipline container exists
  ansible.builtin.shell: |
    pct create {{ zipline_container_id }} {{ zipline_template_file }} \
      --hostname {{ zipline_hostname }} \
      --cores {{ zipline_cores }} \
      --memory {{ zipline_memory }} \
      --swap {{ zipline_swap }} \
      --rootfs {{ zipline_rootfs_storage }}:{{ zipline_disk }} \
      --net0 {{ zipline_net0 }} \
      {% if zipline_unprivileged %}--unprivileged 1{% endif %}
  args:
    creates: "/etc/pve/lxc/{{ zipline_container_id }}.conf"
  when: not ansible_check_mode

- name: Stat Zipline container configuration
  ansible.builtin.stat:
    path: "/etc/pve/lxc/{{ zipline_container_id }}.conf"
  register: zipline_container_conf

- name: Ensure Zipline container onboot flag is set
  ansible.builtin.lineinfile:
    path: "/etc/pve/lxc/{{ zipline_container_id }}.conf"
    regexp: '^onboot:'
    line: "onboot: {{ 1 if zipline_start_onboot else 0 }}"
    insertafter: EOF
  when: zipline_container_conf.stat.exists

- name: Ensure Zipline container DNS servers are set
  ansible.builtin.lineinfile:
    path: "/etc/pve/lxc/{{ zipline_container_id }}.conf"
    regexp: '^nameserver:'
    line: "nameserver: {{ zipline_dns_servers | join(' ') }}"
    insertafter: EOF
  when: zipline_container_conf.stat.exists and zipline_dns_servers is defined and zipline_dns_servers | length > 0

- name: Read Zipline container status
  ansible.builtin.command:
    cmd: pct status {{ zipline_container_id }}
  register: zipline_status
  changed_when: false
  failed_when: zipline_status.rc not in [0, 2]
  when: zipline_container_conf.stat.exists

- name: Start Zipline container
  ansible.builtin.command:
    cmd: pct start {{ zipline_container_id }}
  when:
    - not ansible_check_mode
    - zipline_container_conf.stat.exists
    - zipline_status.rc is defined
    - (zipline_status.rc != 0 or ('stopped' in zipline_status.stdout | default('')))

- name: Wait for Zipline container to boot
  ansible.builtin.command:
    cmd: pct exec {{ zipline_container_id }} -- bash -lc "true"
  register: zipline_boot_probe
  failed_when: false
  changed_when: false
  retries: 10
  delay: 3
  until: zipline_boot_probe.rc == 0
  when:
    - not ansible_check_mode
    - zipline_container_conf.stat.exists

- name: Ensure Zipline root password is set
  ansible.builtin.command:
    cmd: >
      pct exec {{ zipline_container_id }} -- bash -lc "echo 'root:{{ zipline_root_password }}' | chpasswd"
  no_log: true
  when:
    - not ansible_check_mode
    - zipline_container_conf.stat.exists
    - zipline_root_password is defined
    - zipline_root_password | length > 0

- name: Check Zipline provisioning marker
  ansible.builtin.command:
    cmd: >
      pct exec {{ zipline_container_id }} -- bash -lc "test -f /etc/zipline/.provisioned"
  register: zipline_provision_marker
  changed_when: false
  failed_when: false
  when: zipline_container_conf.stat.exists

- name: Install Docker engine
  ansible.builtin.command:
    cmd: >
      pct exec {{ zipline_container_id }} -- bash -lc "apt-get update && apt-get install -y docker.io docker-compose-plugin"
  when:
    - not ansible_check_mode
    - zipline_container_conf.stat.exists
    - zipline_provision_marker.rc is defined
    - zipline_provision_marker.rc != 0

- name: Ensure compose directory exists on host
  ansible.builtin.file:
    path: "{{ zipline_rootfs_path }}{{ zipline_compose_path }}"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Deploy zipline docker compose file
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: "{{ zipline_rootfs_path }}{{ zipline_compose_path }}/docker-compose.yml"
    owner: root
    group: root
    mode: "0644"
  notify: restart zipline stack

- name: Create provisioning marker for zipline
  ansible.builtin.command:
    cmd: >
      pct exec {{ zipline_container_id }} -- bash -lc "mkdir -p /etc/zipline && touch /etc/zipline/.provisioned"
  when:
    - not ansible_check_mode
    - zipline_container_conf.stat.exists
    - zipline_provision_marker.rc is defined
    - zipline_provision_marker.rc != 0
