---
# Infrastructure Backup Tasks

- name: Display backup banner
  ansible.builtin.debug:
    msg:
      - "=========================================="
      - " INFRASTRUCTURE BACKUP"
      - "=========================================="
      - "Timestamp: {{ backup_timestamp }}"
      - "Backup storage: {{ backup_storage }}"
      - "Base directory: {{ backup_base_dir }}"
      - "=========================================="

- name: Create backup directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0700'
    owner: root
    group: root
  loop:
    - "{{ backup_base_dir }}"
    - "{{ backup_base_dir }}/{{ backup_timestamp }}"
    - "{{ backup_base_dir }}/{{ backup_timestamp }}/containers"
    - "{{ backup_base_dir }}/{{ backup_timestamp }}/postgresql"
    - "{{ backup_base_dir }}/{{ backup_timestamp }}/docker-volumes"
    - "{{ backup_base_dir }}/{{ backup_timestamp }}/configs"

- name: Create backup manifest
  ansible.builtin.template:
    src: manifest.yml.j2
    dest: "{{ backup_base_dir }}/{{ backup_timestamp }}/MANIFEST.yml"
    mode: '0644'

# Container Backups
- name: Backup LXC containers
  ansible.builtin.command:
    cmd: >
      vzdump {{ item.id }}
      --storage {{ backup_storage }}
      --mode snapshot
      {% if item.compress | default(true) %}--compress zstd{% endif %}
      --notes-template "Automated backup {{ backup_timestamp }}"
  loop: "{{ backup_containers | selectattr('enabled', 'equalto', true) | list }}"
  loop_control:
    label: "{{ item.name }} ({{ item.id }})"
  register: container_backups

- name: Record container backup results
  ansible.builtin.copy:
    content: |
      {% for result in container_backups.results %}
      {{ result.item.name }}: {{ 'SUCCESS' if result.rc == 0 else 'FAILED' }}
      {% endfor %}
    dest: "{{ backup_base_dir }}/{{ backup_timestamp }}/containers/backup-status.txt"
    mode: '0644'
  when: container_backups is defined

# PostgreSQL Database Backups
- name: Backup PostgreSQL databases
  ansible.builtin.shell:
    cmd: |
      PGPASSWORD='{{ backup_postgresql_password }}' pg_dump \
        -h {{ backup_postgresql_host }} \
        -p {{ backup_postgresql_port }} \
        -U {{ backup_postgresql_user }} \
        -Fc \
        {{ item }} > {{ backup_base_dir }}/{{ backup_timestamp }}/postgresql/{{ item }}_{{ backup_timestamp }}.dump
  loop: "{{ backup_postgresql_databases }}"
  when: backup_postgresql_enabled
  no_log: true
  register: postgresql_backups

- name: Verify PostgreSQL backup files
  ansible.builtin.stat:
    path: "{{ backup_base_dir }}/{{ backup_timestamp }}/postgresql/{{ item }}_{{ backup_timestamp }}.dump"
  loop: "{{ backup_postgresql_databases }}"
  when: backup_postgresql_enabled and backup_verify_postgresql
  register: postgresql_backup_verification

- name: Record PostgreSQL backup results
  ansible.builtin.copy:
    content: |
      {% for result in postgresql_backup_verification.results %}
      {{ result.item }}: {{ 'SUCCESS (' + (result.stat.size | default(0) | filesizeformat) + ')' if result.stat.exists else 'FAILED' }}
      {% endfor %}
    dest: "{{ backup_base_dir }}/{{ backup_timestamp }}/postgresql/backup-status.txt"
    mode: '0644'
  when: backup_postgresql_enabled and backup_verify_postgresql

# Redis Backup
- name: Trigger Redis save
  ansible.builtin.command:
    cmd: "pct exec {{ backup_redis_container_id }} -- redis-cli SAVE"
  when: backup_redis_enabled
  register: redis_save

- name: Backup Redis dump file
  ansible.builtin.shell:
    cmd: >
      pct exec {{ backup_redis_container_id }} -- cat /var/lib/redis/dump.rdb > {{ backup_base_dir }}/{{ backup_timestamp }}/redis_{{ backup_timestamp }}.rdb
  when: backup_redis_enabled and redis_save.rc == 0
  register: redis_backup

# Docker Volumes Backup
- name: Backup Docker volumes
  ansible.builtin.shell:
    cmd: >
      pct exec {{ item.0.container_id }} --
      tar czf /tmp/{{ item.0.name }}_{{ item.1 | basename }}_{{ backup_timestamp }}.tar.gz
      -C {{ item.1 | dirname }} {{ item.1 | basename }} &&
      pct pull {{ item.0.container_id }} /tmp/{{ item.0.name }}_{{ item.1 | basename }}_{{ backup_timestamp }}.tar.gz
      {{ backup_base_dir }}/{{ backup_timestamp }}/docker-volumes/{{ item.0.name }}_{{ item.1 | basename }}_{{ backup_timestamp }}.tar.gz &&
      pct exec {{ item.0.container_id }} -- rm /tmp/{{ item.0.name }}_{{ item.1 | basename }}_{{ backup_timestamp }}.tar.gz
  loop: "{{ backup_docker_containers | subelements('volumes') }}"
  loop_control:
    label: "{{ item.0.name }}: {{ item.1 }}"
  when: backup_docker_volumes_enabled
  register: docker_volume_backups

# Proxmox Configuration Backups
- name: Backup Proxmox configuration files
  ansible.builtin.shell:
    cmd: >
      tar czf {{ backup_base_dir }}/{{ backup_timestamp }}/configs/proxmox-configs_{{ backup_timestamp }}.tar.gz
      {{ backup_proxmox_configs | join(' ') }} 2>/dev/null || true
  when: backup_proxmox_configs_enabled
  register: config_backup
  failed_when: false

# Create backup summary
- name: Create backup summary
  ansible.builtin.template:
    src: summary.txt.j2
    dest: "{{ backup_base_dir }}/{{ backup_timestamp }}/BACKUP_SUMMARY.txt"
    mode: '0644'

# Cleanup old backups
- name: Find old backup directories
  ansible.builtin.find:
    paths: "{{ backup_base_dir }}"
    file_type: directory
    age: "{{ backup_retention_daily }}d"
    recurse: no
  register: old_backups

- name: Remove old backup directories
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ old_backups.files }}"
  loop_control:
    label: "{{ item.path }}"
  when: old_backups.files | length > 0

# Remote backup sync (optional)
- name: Sync backups to remote location
  ansible.builtin.command:
    cmd: >
      rsync -avz --delete
      {{ backup_base_dir }}/{{ backup_timestamp }}/
      {{ backup_remote_user }}@{{ backup_remote_host }}:{{ backup_remote_path }}/{{ backup_timestamp }}/
  when: backup_remote_enabled
  register: remote_sync

# Final verification
- name: Verify backup directory size
  ansible.builtin.shell:
    cmd: "du -sh {{ backup_base_dir }}/{{ backup_timestamp }}"
  register: backup_size

- name: Display backup completion summary
  ansible.builtin.debug:
    msg:
      - "=========================================="
      - " BACKUP COMPLETE"
      - "=========================================="
      - "Timestamp: {{ backup_timestamp }}"
      - "Backup location: {{ backup_base_dir }}/{{ backup_timestamp }}"
      - "Backup size: {{ backup_size.stdout }}"
      - "Containers backed up: {{ backup_containers | selectattr('enabled', 'equalto', true) | list | length }}"
      - "PostgreSQL databases: {{ backup_postgresql_databases | length if backup_postgresql_enabled else 0 }}"
      - "Docker volumes: {{ docker_volume_backups.results | length if backup_docker_volumes_enabled and docker_volume_backups is defined else 0 }}"
      - "Remote sync: {{ 'Completed' if backup_remote_enabled and remote_sync is defined and remote_sync.rc == 0 else 'Disabled' }}"
      - ""
      - "Backup manifest: {{ backup_base_dir }}/{{ backup_timestamp }}/MANIFEST.yml"
      - "Backup summary: {{ backup_base_dir }}/{{ backup_timestamp }}/BACKUP_SUMMARY.txt"
      - "=========================================="
